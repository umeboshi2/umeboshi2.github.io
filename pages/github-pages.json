{"content": "# Creating a Static Website with GitHub\n\n## GitHub Pages\n\nGitHub Pages provide a static website for your project that is, \nby nature of the service, kept in a git repository.  This makes \nupdating the site, and even reverting parts of it back to an \nearlier version easy.\n\nFor coding projects, I often make my websites by taking specially \nformatted text files, such as restructured text or markdown, and \nrender the files to html, then post the html files to the \ndocument root.  For the GitHub sites, I decided to basically \nwrite the pages in the same manner, except for now I am limited to \nusing markdown.  The difference is that I am not rendering the \nmarkdown text to html, rather the web browser will be doing this.\n\nThe desire is to use [requirejs-text](https://github.com/requirejs/text) \nto retrieve the file content by name, then have the client render \nthe text.  At the moment, this isn't working, so I am using a \nscript to take the markdown files and create a \n[JSON](http://en.wikipedia.org/wiki/JSON) object that is \nstored in a corresponding .json file, which is retrieved in an \n[xhr](http://en.wikipedia.org/wiki/XMLHttpRequest) request.  When \nthis difficulty is overcome, all that will need to be done will be \nmanage *one* directory of text files.\n\n\n## Vagrant\n\nI am using [Vagrant](http://vagrantup.com) to house the development \ntools to build the website.  I use a [nodejs](http://nodejs.org) \nenvironment to develop the website, using [Grunt](http://gruntjs.com) \nto handle much of the work.  I am also using the basebox I created \nto help with web development, \n[trumpet-i386](https://vagrantcloud.com/umeboshi/trumpet-i386).\n\nThe trumpet box comes with fairly recent versions of nodejs,\n[compass](http://compass-style.org), \n[coffee script](http://coffeescript.org), Grunt,\n[Bower](http://bower.io), and some ruby gems to help with \nstylesheet development.\n\n\n## Trumpet without pyramid\n\n[Trumpet](https://github.com/umeboshi2/trumpet) is the code that \nI use to create websites.  The trumpet web server is a \n[Pyramid](http://www.pylonsproject.org/) based server that serves \n[REST](http://en.wikipedia.org/wiki/Representational_state_transfer) \nresources and the static resources built in the nodejs environment.\n\nWith the GitHub sites serving only static resources, the web \nserver portion of trumpet isn't needed, but the tools that provide \nthe client side applications and stylesheets are still quite \nuseful.\n\n## Stylesheet Development\n\nHere I should mention compass, the gems I've installed on the \ntrumpet basebox, and how to maintain the stylesheets.\n\n## Client Application Development\n\nHere I should mention all those tools that I have had a hard time \nselecting and putting together in the manner I have chosen to \ndevelop.\n\n### Basic Guidelines\n\nThree axioms I've chosen to follow:\n\n1. Use a stack built of minimal components that perform specific \n   jobs.\n   \n2. Write all code in coffeescript, but do not depend on coffee\n   script upstream, when good javascript serves better.\n   \n3. Use components that support amd loading as much as possible\n   to keep the coding environment as clean as possible.\n   \n(The marriage of coffeescript and amd loading provides the ability \nto maintain a large code base in a manner almost comparable to\npython.)\n\n### Base Library\n\nDue to the necessity of amd loading, the primary javascript \nlibrary that is used is [Requirejs](http://requirejs.org).  This \nlibrary works for me in two distinct scenarios.  The first \nscenario is the development process, where the library handles \nthe loading of all of the resources.  While this scenario is \ngreat for development, the astounding number of http requests \nthat are done can be a show stopper if this was used in \nproduction.  The second scenario that requirejs is used for is \nin the building of a single static resources that contains the \nbulk of the modules that are loaded into your app by scanning \nthe files and including all the top level requirements \nrecusively in each module loaded. This is done in the nodejs \nenvironment with the r.js command line tool that requirejs \nprovides.  This base library is the code that helps to load and \nmanage all of the other parts of the application stack.\n\n### Lower Libraries\n\nThese lower libraries form the common base that each application \nis based upon.  The most notable of the lower libraries is \n[jQuery](http://jquery.com).  This library is very useful for \nselecting and manipulating \n[DOM](http://en.wikipedia.org/wiki/Document_Object_Model) elements.  \nThis library has possibly the largest user base of any javascript \nlibrary being used by anybody.\n\nI decided to use [Backbone](http://backbonejs.org/) to provide the \nmodel/view framework for the applications.  [Lo-Dash](http://lodash.com/) \nwas chosen, mainly for the amd support, to provide the underscore \ndependency for backbone.\n\nI wanted something better than the underscore templates that were \nalready available in the stack.  I just happened to wander \nacross [Teacup](http://goodeggs.github.io/teacup/) one day and decided \nthat this would be the best way to create templates, although the \nboilerplate for the tag names can be tedious to keep up with.\n\n### Middle Level Libraries\n\n[MarionetteJS](http://marionettejs.com/) was chosen to help manage \nthe backbone objects in a coherent manner.  While this \n[chapter](http://addyosmani.github.io/backbone-fundamentals/#marionettejs-backbone.marionette) in the backbone fundamentals book does a good job of \ndescribing the benefits of using Marionette, it doesn't say much \nabout the [Wreqr](https://github.com/marionettejs/backbone.wreqr) object \nthat is very useful in managing the collection of objects and interactions.\n\n\n\n\n[static](#pages/trumpet-resources) resources\n", "id": "github-pages"}