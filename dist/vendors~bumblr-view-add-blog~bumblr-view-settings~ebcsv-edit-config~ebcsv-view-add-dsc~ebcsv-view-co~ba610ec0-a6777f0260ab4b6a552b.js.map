{"version":3,"sources":["webpack:///./node_modules/backbone.validation/dist/backbone.validation.js","webpack:///./node_modules/tbirds/src/templates/forms.coffee","webpack:///./node_modules/tbirds/src/views/bsformview.coffee","webpack:///./node_modules/tbirds/src/views/formview.coffee"],"names":["Backbone","_","module","exports","__webpack_require__","Validation","getOptionsAttrs","validateAttr","mixin","bindModel","unbindModel","collectionAdd","collectionRemove","trim","isNumber","hasValue","defaultOptions","forceUpdate","selector","labelFormatter","valid","Function","prototype","invalid","formatFunctions","formatLabel","attrName","model","defaultLabelFormatters","format","args","Array","slice","call","arguments","shift","replace","match","number","flatten","obj","into","prefix","each","val","key","hasOwnProperty","constructor","Object","options","view","attrs","attributes","isFunction","isString","defaultAttributeLoaders","isArray","attr","value","computed","reduce","attrValidationSet","validation","result","memo","attrValidation","fn","keys","validator","push","defaultValidators","msg","getValidators","ctx","extend","associatedViews","length","without","validate","preValidate","isValid","this","version","configure","bind","defaultCallbacks","collection","unbind","error","self","allAttrs","isObject","attrKey","isEmpty","undefined","option","flattened","invalidAttrs","trigger","validationError","_isValid","setOptions","validateAll","opt","validatedAttrs","getValidatedAttrs","changedAttrs","validateModel","pick","changed","defer","intersection","callbacks","$","removeClass","removeAttr","addClass","defaultPatterns","patterns","digits","email","url","defaultMessages","messages","required","acceptance","min","max","range","minLength","maxLength","rangeLength","oneOf","equalTo","inlinePattern","labelFormatters","none","sentenceCase","index","toUpperCase","toLowerCase","label","labels","attributeLoaders","inputNames","test","nodeName","name","type","indexOf","validators","String","text","toString","isNull","isUndefined","isRequired","accept","isBoolean","minValue","maxValue","values","include","join","pattern","form_group_input_div","login_form","make_field_input","make_field_select","make_field_textarea","make_login_form","name_content_form","_util_capitalize__WEBPACK_IMPORTED_MODULE_1__","teacup__WEBPACK_IMPORTED_MODULE_0___default","a","renderable","data","div","atts","input_type","for","input_id","input_attributes","input","content","field","placeholder","optlist","select","i","len","results","selected","action","method","user","form","role","button","textarea","bsformview_coffee_BootstrapFormView","boundMethodCheck","instance","Constructor","Error","formview_coffee","FormView","Marionette","View","[object Object]","listenTo","hideActivityIndicator","prepareModel","success","failure","events","ui","underscore_default","_baseUI","_baseEvents","delegateEvents","submit","activityIndicator","eventHash","change [data-validation]","validateField","blur [data-validation]","keyup [data-validation]","processForm","createModel","setupValidation","e","jquery_default","target","preventDefault","showActivityIndicator","updateModel","saveModel","save","render","onSuccess","onFailure","show","hide","tagName","bsformview_coffee_boundMethodCheck","BootstrapFormView","parent","__webpack_exports__"],"mappings":"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","file":"vendors~bumblr-view-add-blog~bumblr-view-settings~ebcsv-edit-config~ebcsv-view-add-dsc~ebcsv-view-co~ba610ec0-a6777f0260ab4b6a552b.js","sourcesContent":["// Backbone.Validation v0.12.2\r\n//\r\n// Copyright (c) 2011-2018 Thomas Pedersen\r\n// Distributed under MIT License\r\n//\r\n// Documentation and full license available at:\r\n// https://github.com/blikblum/backbone.validation\r\n(function (global, factory) {\r\n  if (typeof exports === 'object') {\r\n    module.exports = factory(require('backbone'), require('underscore'));\r\n  } else if (typeof define === 'function' && define.amd) {\r\n    define(['backbone', 'underscore'], factory);\r\n  } else {\r\n    factory(global.Backbone, global._);\r\n  }\r\n}(this, function (Backbone, _) {\r\n  Backbone.Validation = (function(_){\r\n    'use strict';\r\n  \r\n    // Default options\r\n    // ---------------\r\n  \r\n    var defaultOptions = {\r\n      forceUpdate: false,\r\n      selector: 'name',\r\n      labelFormatter: 'sentenceCase',\r\n      valid: Function.prototype,\r\n      invalid: Function.prototype\r\n    };\r\n  \r\n  \r\n    // Helper functions\r\n    // ----------------\r\n  \r\n    // Formatting functions used for formatting error messages\r\n    var formatFunctions = {\r\n      // Uses the configured label formatter to format the attribute name\r\n      // to make it more readable for the user\r\n      formatLabel: function(attrName, model) {\r\n        return defaultLabelFormatters[defaultOptions.labelFormatter](attrName, model);\r\n      },\r\n  \r\n      // Replaces nummeric placeholders like {0} in a string with arguments\r\n      // passed to the function\r\n      format: function() {\r\n        var args = Array.prototype.slice.call(arguments),\r\n            text = args.shift();\r\n        return text.replace(/\\{(\\d+)\\}/g, function(match, number) {\r\n          return typeof args[number] !== 'undefined' ? args[number] : match;\r\n        });\r\n      }\r\n    };\r\n  \r\n    // Flattens an object\r\n    // eg:\r\n    //\r\n    //     var o = {\r\n    //       owner: {\r\n    //         name: 'Backbone',\r\n    //         address: {\r\n    //           street: 'Street',\r\n    //           zip: 1234\r\n    //         }\r\n    //       }\r\n    //     };\r\n    //\r\n    // becomes:\r\n    //\r\n    //     var o = {\r\n    //       'owner': {\r\n    //         name: 'Backbone',\r\n    //         address: {\r\n    //           street: 'Street',\r\n    //           zip: 1234\r\n    //         }\r\n    //       },\r\n    //       'owner.name': 'Backbone',\r\n    //       'owner.address': {\r\n    //         street: 'Street',\r\n    //         zip: 1234\r\n    //       },\r\n    //       'owner.address.street': 'Street',\r\n    //       'owner.address.zip': 1234\r\n    //     };\r\n    // This may seem redundant, but it allows for maximum flexibility\r\n    // in validation rules.\r\n    var flatten = function (obj, into, prefix) {\r\n      into = into || {};\r\n      prefix = prefix || '';\r\n  \r\n      _.each(obj, function(val, key) {\r\n        if(obj.hasOwnProperty(key)) {\r\n          if (!!val && typeof val === 'object' && val.constructor === Object) {\r\n            flatten(val, into, prefix + key + '.');\r\n          }\r\n  \r\n          // Register the current level object as well\r\n          into[prefix + key] = val;\r\n        }\r\n      });\r\n  \r\n      return into;\r\n    };\r\n  \r\n    // Validation\r\n    // ----------\r\n  \r\n    var Validation = (function(){\r\n  \r\n      // Returns an object with undefined properties for all\r\n      // attributes on the model that has defined one or more\r\n      // validation rules.\r\n      var getValidatedAttrs = function(model, attrs) {\r\n        attrs = attrs || _.keys(_.result(model, 'validation') || {});\r\n        return _.reduce(attrs, function(memo, key) {\r\n          memo[key] = void 0;\r\n          return memo;\r\n        }, {});\r\n      };\r\n  \r\n      // Returns an array with attributes passed through options\r\n      var getOptionsAttrs = function(options, view) {\r\n        var attrs = options.attributes;\r\n        if (_.isFunction(attrs)) {\r\n          attrs = attrs(view);\r\n        } else if (_.isString(attrs) && (_.isFunction(defaultAttributeLoaders[attrs]))) {\r\n          attrs = defaultAttributeLoaders[attrs](view);\r\n        }\r\n        if (_.isArray(attrs)) {\r\n          return attrs;\r\n        }\r\n      };\r\n  \r\n  \r\n      // Looks on the model for validations for a specified\r\n      // attribute. Returns an array of any validators defined,\r\n      // or an empty array if none is defined.\r\n      var getValidators = function(model, attr) {\r\n        var attrValidationSet = model.validation ? _.result(model, 'validation')[attr] || {} : {};\r\n  \r\n        // Stick the validator object into an array\r\n        if(!_.isArray(attrValidationSet)) {\r\n          attrValidationSet = [attrValidationSet];\r\n        }\r\n  \r\n        // Reduces the array of validators into a new array with objects\r\n        // with a validation method to call, the value to validate against\r\n        // and the specified error message, if any\r\n        return _.reduce(attrValidationSet, function(memo, attrValidation) {\r\n  \r\n          // If the validator is a function or a string, wrap it in a function validator\r\n          if (_.isFunction(attrValidation) || _.isString(attrValidation)) {\r\n            attrValidation = {\r\n              fn: attrValidation\r\n            };\r\n          }\r\n  \r\n          _.each(_.keys(attrValidation), function(validator) {\r\n            if (validator === 'msg') return;\r\n            memo.push({\r\n              fn: defaultValidators[validator],\r\n              val: attrValidation[validator],\r\n              msg: attrValidation.msg\r\n            });\r\n          });\r\n          return memo;\r\n        }, []);\r\n      };\r\n  \r\n      // Validates an attribute against all validators defined\r\n      // for that attribute. If one or more errors are found,\r\n      // the first error message is returned.\r\n      // If the attribute is valid, an empty string is returned.\r\n      var validateAttr = function(model, attr, value, computed) {\r\n        // Reduces the array of validators to an error message by\r\n        // applying all the validators and returning the first error\r\n        // message, if any.\r\n        return _.reduce(getValidators(model, attr), function(memo, validator){\r\n          // Pass the format functions plus the default\r\n          // validators as the context to the validator\r\n          var ctx = _.extend({}, formatFunctions, defaultValidators),\r\n              result = validator.fn.call(ctx, value, attr, validator.val, model, computed);\r\n  \r\n          if(result === false || memo === false) {\r\n            return false;\r\n          }\r\n          if (result && !memo) {\r\n            return _.result(validator, 'msg') || result;\r\n          }\r\n          return memo;\r\n        }, '');\r\n      };\r\n  \r\n      // Loops through the model's attributes and validates the specified attrs.\r\n      // Returns and object containing names of invalid attributes\r\n      // as well as error messages.\r\n      var validateModel = function(model, allAttrs, validatedAttrs) {\r\n        var error,\r\n            invalidAttrs = {},\r\n            isValid = true;\r\n  \r\n        _.each(validatedAttrs, function(val, attr) {\r\n          error = validateAttr(model, attr, val, allAttrs);\r\n          if (error) {\r\n            invalidAttrs[attr] = error;\r\n            isValid = false;\r\n          }\r\n        });\r\n  \r\n        return {\r\n          invalidAttrs: invalidAttrs,\r\n          isValid: isValid\r\n        };\r\n      };\r\n  \r\n      // Contains the methods that are mixed in on the model when binding\r\n      var mixin = function(view, options) {\r\n        return {\r\n  \r\n          // Check whether or not a value, or a hash of values\r\n          // passes validation without updating the model\r\n          preValidate: function(attr, value) {\r\n            var self = this,\r\n                result = {},\r\n                error,\r\n                allAttrs = _.extend({}, this.attributes);\r\n  \r\n            if(_.isObject(attr)){\r\n              // if multiple attributes are passed at once we would like for the validation functions to\r\n              // have access to the fresh values sent for all attributes, in the same way they do in the\r\n              // regular validation\r\n              _.extend(allAttrs, attr);\r\n  \r\n              _.each(attr, function(value, attrKey) {\r\n                error = validateAttr(self, attrKey, value, allAttrs);\r\n                if(error){\r\n                  result[attrKey] = error;\r\n                }\r\n              });\r\n  \r\n              return _.isEmpty(result) ? undefined : result;\r\n            }\r\n            else {\r\n              return validateAttr(this, attr, value, allAttrs);\r\n            }\r\n          },\r\n  \r\n          // Check to see if an attribute, an array of attributes or the\r\n          // entire model is valid. Passing true will force a validation\r\n          // of the model.\r\n          isValid: function(option) {\r\n            var self = this, flattened, attrs, error, invalidAttrs;\r\n  \r\n            option = option || getOptionsAttrs(options, view);\r\n  \r\n            if(_.isString(option)){\r\n              attrs = [option];\r\n            } else if(_.isArray(option)) {\r\n              attrs = option;\r\n            }\r\n            if (attrs) {\r\n              flattened = flatten(self.attributes);\r\n              //Loop through all attributes and mark attributes invalid if appropriate\r\n              _.each(attrs, function (attr) {\r\n                error = validateAttr(self, attr, flattened[attr], _.extend({}, self.attributes));\r\n                if (error) {\r\n                    invalidAttrs = invalidAttrs || {};\r\n                    invalidAttrs[attr] = error;\r\n                }\r\n                //trigger valid/invalid events for each associated view\r\n                _.each(self.associatedViews, function(view) {\r\n                  if (error) {\r\n                    options.invalid(view, attr, error, options.selector, self);\r\n                  } else {\r\n                    options.valid(view, attr, options.selector, self);\r\n                  }\r\n                });\r\n              });\r\n            }\r\n  \r\n            if(option === true) {\r\n              invalidAttrs = this.validate();\r\n            }\r\n            if (invalidAttrs) {\r\n              this.trigger('invalid', this, invalidAttrs, {validationError: invalidAttrs});\r\n            }\r\n            return attrs ? !invalidAttrs : this.validation ? this._isValid : true;\r\n          },\r\n  \r\n          // This is called by Backbone when it needs to perform validation.\r\n          // You can call it manually without any parameters to validate the\r\n          // entire model.\r\n          validate: function(attrs, setOptions){\r\n            var model = this,\r\n                validateAll = !attrs,\r\n                opt = _.extend({}, options, setOptions),\r\n                validatedAttrs = getValidatedAttrs(model, getOptionsAttrs(options, view)),\r\n                allAttrs = _.extend({}, validatedAttrs, model.attributes, attrs),\r\n                flattened = flatten(allAttrs),\r\n                changedAttrs = attrs ? flatten(attrs) : flattened,\r\n                result = validateModel(model, allAttrs, _.pick(flattened, _.keys(validatedAttrs)));\r\n  \r\n            model._isValid = result.isValid;\r\n  \r\n            //After validation is performed, loop through all associated views\r\n            _.each(model.associatedViews, function(view){\r\n  \r\n              // After validation is performed, loop through all validated and changed attributes\r\n              // and call the valid and invalid callbacks so the view is updated.\r\n              _.each(validatedAttrs, function(val, attr){\r\n                  var invalid = result.invalidAttrs.hasOwnProperty(attr),\r\n                    changed = changedAttrs.hasOwnProperty(attr);\r\n  \r\n                  if(!invalid){\r\n                    opt.valid(view, attr, opt.selector, model);\r\n                  }\r\n                  if(invalid && (changed || validateAll)){\r\n                    opt.invalid(view, attr, result.invalidAttrs[attr], opt.selector, model);\r\n                  }\r\n              });\r\n            });\r\n  \r\n            // Trigger validated events.\r\n            // Need to defer this so the model is actually updated before\r\n            // the event is triggered.\r\n            _.defer(function() {\r\n              model.trigger('validated', model._isValid, model, result.invalidAttrs);\r\n              model.trigger('validated:' + (model._isValid ? 'valid' : 'invalid'), model, result.invalidAttrs);\r\n            });\r\n  \r\n            // Return any error messages to Backbone, unless the forceUpdate flag is set.\r\n            // Then we do not return anything and fools Backbone to believe the validation was\r\n            // a success. That way Backbone will update the model regardless.\r\n            if (!opt.forceUpdate && _.intersection(_.keys(result.invalidAttrs), _.keys(changedAttrs)).length > 0) {\r\n              return result.invalidAttrs;\r\n            }\r\n          }\r\n        };\r\n      };\r\n  \r\n      // Helper to mix in validation on a model. Stores the view in the associated views array.\r\n      var bindModel = function(view, model, options) {\r\n        if (model.associatedViews) {\r\n          model.associatedViews.push(view);\r\n        } else {\r\n          model.associatedViews = [view];\r\n        }\r\n        _.extend(model, mixin(view, options));\r\n      };\r\n  \r\n      // Removes view from associated views of the model or the methods\r\n      // added to a model if no view or single view provided\r\n      var unbindModel = function(model, view) {\r\n        if (view && model.associatedViews && model.associatedViews.length > 1){\r\n          model.associatedViews = _.without(model.associatedViews, view);\r\n        } else {\r\n          delete model.validate;\r\n          delete model.preValidate;\r\n          delete model.isValid;\r\n          delete model.associatedViews;\r\n        }\r\n      };\r\n  \r\n      // Mix in validation on a model whenever a model is\r\n      // added to a collection\r\n      var collectionAdd = function(model) {\r\n        bindModel(this.view, model, this.options);\r\n      };\r\n  \r\n      // Remove validation from a model whenever a model is\r\n      // removed from a collection\r\n      var collectionRemove = function(model) {\r\n        unbindModel(model);\r\n      };\r\n  \r\n      // Returns the public methods on Backbone.Validation\r\n      return {\r\n  \r\n        // Current version of the library\r\n        version: '0.12',\r\n  \r\n        // Called to configure the default options\r\n        configure: function(options) {\r\n          _.extend(defaultOptions, options);\r\n        },\r\n  \r\n        // Hooks up validation on a view with a model\r\n        // or collection\r\n        bind: function(view, options) {\r\n          options = _.extend({}, defaultOptions, defaultCallbacks, options);\r\n  \r\n          var model = options.model || view.model,\r\n              collection = options.collection || view.collection;\r\n  \r\n          if(typeof model === 'undefined' && typeof collection === 'undefined'){\r\n            throw 'Before you execute the binding your view must have a model or a collection.\\n' +\r\n                  'See http://thedersen.com/projects/backbone-validation/#using-form-model-validation for more information.';\r\n          }\r\n  \r\n          if(model) {\r\n            bindModel(view, model, options);\r\n          }\r\n          else if(collection) {\r\n            collection.each(function(model){\r\n              bindModel(view, model, options);\r\n            });\r\n            collection.bind('add', collectionAdd, {view: view, options: options});\r\n            collection.bind('remove', collectionRemove);\r\n          }\r\n        },\r\n  \r\n        // Removes validation from a view with a model\r\n        // or collection\r\n        unbind: function(view, options) {\r\n          options = _.extend({}, options);\r\n          var model = options.model || view.model,\r\n              collection = options.collection || view.collection;\r\n  \r\n          if(model) {\r\n            unbindModel(model, view);\r\n          }\r\n          else if(collection) {\r\n            collection.each(function(model){\r\n              unbindModel(model, view);\r\n            });\r\n            collection.unbind('add', collectionAdd);\r\n            collection.unbind('remove', collectionRemove);\r\n          }\r\n        },\r\n  \r\n        // Used to extend the Backbone.Model.prototype\r\n        // with validation\r\n        mixin: mixin(null, defaultOptions)\r\n      };\r\n    }());\r\n  \r\n  \r\n    // Callbacks\r\n    // ---------\r\n  \r\n    var defaultCallbacks = Validation.callbacks = {\r\n  \r\n      // Gets called when a previously invalid field in the\r\n      // view becomes valid. Removes any error message.\r\n      // Should be overridden with custom functionality.\r\n      valid: function(view, attr, selector) {\r\n        view.$('[' + selector + '~=\"' + attr + '\"]')\r\n            .removeClass('invalid')\r\n            .removeAttr('data-error');\r\n      },\r\n  \r\n      // Gets called when a field in the view becomes invalid.\r\n      // Adds a error message.\r\n      // Should be overridden with custom functionality.\r\n      invalid: function(view, attr, error, selector) {\r\n        view.$('[' + selector + '~=\"' + attr + '\"]')\r\n            .addClass('invalid')\r\n            .attr('data-error', error);\r\n      }\r\n    };\r\n  \r\n  \r\n    // Patterns\r\n    // --------\r\n  \r\n    var defaultPatterns = Validation.patterns = {\r\n      // Matches any digit(s) (i.e. 0-9)\r\n      digits: /^\\d+$/,\r\n  \r\n      // Matches any number (e.g. 100.000)\r\n      number: /^-?(?:\\d+|\\d{1,3}(?:,\\d{3})+)?(?:\\.\\d*)?$/,\r\n  \r\n      // Matches a valid email address (e.g. mail@example.com)\r\n      email: /^((([a-z]|\\d|[\\[\\]()!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[\\[\\]()!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i,\r\n  \r\n      // Mathes any valid url (e.g. http://www.xample.com)\r\n      url: /^(https?|ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(\\#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i\r\n    };\r\n  \r\n  \r\n    // Error messages\r\n    // --------------\r\n  \r\n    // Error message for the build in validators.\r\n    // {x} gets swapped out with arguments from the validator.\r\n    var defaultMessages = Validation.messages = {\r\n      required: '{0} is required',\r\n      acceptance: '{0} must be accepted',\r\n      min: '{0} must be greater than or equal to {1}',\r\n      max: '{0} must be less than or equal to {1}',\r\n      range: '{0} must be between {1} and {2}',\r\n      length: '{0} must be {1} characters',\r\n      minLength: '{0} must be at least {1} characters',\r\n      maxLength: '{0} must be at most {1} characters',\r\n      rangeLength: '{0} must be between {1} and {2} characters',\r\n      oneOf: '{0} must be one of: {1}',\r\n      equalTo: '{0} must be the same as {1}',\r\n      digits: '{0} must only contain digits',\r\n      number: '{0} must be a number',\r\n      email: '{0} must be a valid email',\r\n      url: '{0} must be a valid url',\r\n      inlinePattern: '{0} is invalid'\r\n    };\r\n  \r\n    // Label formatters\r\n    // ----------------\r\n  \r\n    // Label formatters are used to convert the attribute name\r\n    // to a more human friendly label when using the built in\r\n    // error messages.\r\n    // Configure which one to use with a call to\r\n    //\r\n    //     Backbone.Validation.configure({\r\n    //       labelFormatter: 'label'\r\n    //     });\r\n    var defaultLabelFormatters = Validation.labelFormatters = {\r\n  \r\n      // Returns the attribute name with applying any formatting\r\n      none: function(attrName) {\r\n        return attrName;\r\n      },\r\n  \r\n      // Converts attributeName or attribute_name to Attribute name\r\n      sentenceCase: function(attrName) {\r\n        return attrName.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(match, index) {\r\n          return index === 0 ? match.toUpperCase() : ' ' + match.toLowerCase();\r\n        }).replace(/_/g, ' ');\r\n      },\r\n  \r\n      // Looks for a label configured on the model and returns it\r\n      //\r\n      //      var Model = Backbone.Model.extend({\r\n      //        validation: {\r\n      //          someAttribute: {\r\n      //            required: true\r\n      //          }\r\n      //        },\r\n      //\r\n      //        labels: {\r\n      //          someAttribute: 'Custom label'\r\n      //        }\r\n      //      });\r\n      label: function(attrName, model) {\r\n        return (model.labels && model.labels[attrName]) || defaultLabelFormatters.sentenceCase(attrName, model);\r\n      }\r\n    };\r\n  \r\n    // AttributeLoaders\r\n  \r\n    var defaultAttributeLoaders = Validation.attributeLoaders = {\r\n      inputNames: function (view) {\r\n        var attrs = [];\r\n        if (view) {\r\n          view.$('form [name]').each(function () {\r\n            if (/^(?:input|select|textarea)$/i.test(this.nodeName) && this.name &&\r\n              this.type !== 'submit' && attrs.indexOf(this.name) === -1) {\r\n              attrs.push(this.name);\r\n            }\r\n          });\r\n        }\r\n        return attrs;\r\n      }\r\n    };\r\n  \r\n  \r\n    // Built in validators\r\n    // -------------------\r\n  \r\n    var defaultValidators = Validation.validators = (function(){\r\n      // Use native trim when defined\r\n      var trim = String.prototype.trim ?\r\n        function(text) {\r\n          return text === null ? '' : String.prototype.trim.call(text);\r\n        } :\r\n        function(text) {\r\n          var trimLeft = /^\\s+/,\r\n              trimRight = /\\s+$/;\r\n  \r\n          return text === null ? '' : text.toString().replace(trimLeft, '').replace(trimRight, '');\r\n        };\r\n  \r\n      // Determines whether or not a value is a number\r\n      var isNumber = function(value){\r\n        return _.isNumber(value) || (_.isString(value) && value.match(defaultPatterns.number));\r\n      };\r\n  \r\n      // Determines whether or not a value is empty\r\n      var hasValue = function(value) {\r\n        return !(_.isNull(value) || _.isUndefined(value) || (_.isString(value) && trim(value) === '') || (_.isArray(value) && _.isEmpty(value)));\r\n      };\r\n  \r\n      return {\r\n        // Function validator\r\n        // Lets you implement a custom function used for validation\r\n        fn: function(value, attr, fn, model, computed) {\r\n          if(_.isString(fn)){\r\n            fn = model[fn];\r\n          }\r\n          return fn.call(model, value, attr, computed);\r\n        },\r\n  \r\n        // Required validator\r\n        // Validates if the attribute is required or not\r\n        // This can be specified as either a boolean value or a function that returns a boolean value\r\n        required: function(value, attr, required, model, computed) {\r\n          var isRequired = _.isFunction(required) ? required.call(model, value, attr, computed) : required;\r\n          if(!isRequired && !hasValue(value)) {\r\n            return false; // overrides all other validators\r\n          }\r\n          if (isRequired && !hasValue(value)) {\r\n            return this.format(defaultMessages.required, this.formatLabel(attr, model));\r\n          }\r\n        },\r\n  \r\n        // Acceptance validator\r\n        // Validates that something has to be accepted, e.g. terms of use\r\n        // `true` or 'true' are valid\r\n        acceptance: function(value, attr, accept, model) {\r\n          if(value !== 'true' && (!_.isBoolean(value) || value === false)) {\r\n            return this.format(defaultMessages.acceptance, this.formatLabel(attr, model));\r\n          }\r\n        },\r\n  \r\n        // Min validator\r\n        // Validates that the value has to be a number and equal to or greater than\r\n        // the min value specified\r\n        min: function(value, attr, minValue, model) {\r\n          if (!isNumber(value) || value < minValue) {\r\n            return this.format(defaultMessages.min, this.formatLabel(attr, model), minValue);\r\n          }\r\n        },\r\n  \r\n        // Max validator\r\n        // Validates that the value has to be a number and equal to or less than\r\n        // the max value specified\r\n        max: function(value, attr, maxValue, model) {\r\n          if (!isNumber(value) || value > maxValue) {\r\n            return this.format(defaultMessages.max, this.formatLabel(attr, model), maxValue);\r\n          }\r\n        },\r\n  \r\n        // Range validator\r\n        // Validates that the value has to be a number and equal to or between\r\n        // the two numbers specified\r\n        range: function(value, attr, range, model) {\r\n          if(!isNumber(value) || value < range[0] || value > range[1]) {\r\n            return this.format(defaultMessages.range, this.formatLabel(attr, model), range[0], range[1]);\r\n          }\r\n        },\r\n  \r\n        // Length validator\r\n        // Validates that the value has to be a string with length equal to\r\n        // the length value specified\r\n        length: function(value, attr, length, model) {\r\n          if (!_.isString(value) || value.length !== length) {\r\n            return this.format(defaultMessages.length, this.formatLabel(attr, model), length);\r\n          }\r\n        },\r\n  \r\n        // Min length validator\r\n        // Validates that the value has to be a string with length equal to or greater than\r\n        // the min length value specified\r\n        minLength: function(value, attr, minLength, model) {\r\n          if (!_.isString(value) || value.length < minLength) {\r\n            return this.format(defaultMessages.minLength, this.formatLabel(attr, model), minLength);\r\n          }\r\n        },\r\n  \r\n        // Max length validator\r\n        // Validates that the value has to be a string with length equal to or less than\r\n        // the max length value specified\r\n        maxLength: function(value, attr, maxLength, model) {\r\n          if (!_.isString(value) || value.length > maxLength) {\r\n            return this.format(defaultMessages.maxLength, this.formatLabel(attr, model), maxLength);\r\n          }\r\n        },\r\n  \r\n        // Range length validator\r\n        // Validates that the value has to be a string and equal to or between\r\n        // the two numbers specified\r\n        rangeLength: function(value, attr, range, model) {\r\n          if (!_.isString(value) || value.length < range[0] || value.length > range[1]) {\r\n            return this.format(defaultMessages.rangeLength, this.formatLabel(attr, model), range[0], range[1]);\r\n          }\r\n        },\r\n  \r\n        // One of validator\r\n        // Validates that the value has to be equal to one of the elements in\r\n        // the specified array. Case sensitive matching\r\n        oneOf: function(value, attr, values, model) {\r\n          if(!_.include(values, value)){\r\n            return this.format(defaultMessages.oneOf, this.formatLabel(attr, model), values.join(', '));\r\n          }\r\n        },\r\n  \r\n        // Equal to validator\r\n        // Validates that the value has to be equal to the value of the attribute\r\n        // with the name specified\r\n        equalTo: function(value, attr, equalTo, model, computed) {\r\n          if(value !== computed[equalTo]) {\r\n            return this.format(defaultMessages.equalTo, this.formatLabel(attr, model), this.formatLabel(equalTo, model));\r\n          }\r\n        },\r\n  \r\n        // Pattern validator\r\n        // Validates that the value has to match the pattern specified.\r\n        // Can be a regular expression or the name of one of the built in patterns\r\n        pattern: function(value, attr, pattern, model) {\r\n          if (!hasValue(value) || !value.toString().match(defaultPatterns[pattern] || pattern)) {\r\n            return this.format(defaultMessages[pattern] || defaultMessages.inlinePattern, this.formatLabel(attr, model), pattern);\r\n          }\r\n        }\r\n      };\r\n    }());\r\n  \r\n    // Set the correct context for all validators\r\n    // when used from within a method validator\r\n    _.each(defaultValidators, function(validator, key){\r\n      defaultValidators[key] = _.bind(defaultValidators[key], _.extend({}, formatFunctions, defaultValidators));\r\n    });\r\n  \r\n    return Validation;\r\n  }(_));\r\n  return Backbone.Validation;\r\n}));","import tc from 'teacup'\n\nimport capitalize from '../util/capitalize'\n\nif __useCssModules__\n  require \"../../sass/forms.scss\"\n\n########################################\n# Form Templates\n########################################\nform_group_input_div = tc.renderable (data) ->\n  tc.div '.form-group', ->\n    tc.label '.control-label',\n      for:data.input_id\n      data.label\n    selector = \"##{data.input_id}.form-control\"\n    atts = data.input_attributes\n    input_type = tc.input\n    if data?.input_type\n      input_type = tc[data.input_type]\n      input_type selector, atts, ->\n        tc.text data?.content\n    else\n      input_type selector, atts\n\nmake_field_input = (field) ->\n  tc.renderable (model) ->\n    form_group_input_div\n      input_id: \"input_#{field}\"\n      label: capitalize field\n      input_attributes:\n        name: field\n        placeholder: field\n        value: model[field]\n    \nmake_field_textarea = (field) ->\n  tc.renderable (model) ->\n    form_group_input_div\n      input_id: \"input_#{field}\"\n      input_type: 'textarea'\n      label: capitalize field\n      input_attributes:\n        name: field\n        placeholder: field\n      content: model[field]\n\nmake_field_select = (field, optlist) ->\n  tc.renderable (model) ->\n    tc.div '.form-group', ->\n      tc.label '.control-label',\n        for:\"select_#{field}\"\n      capitalize field\n    tc.select '.form-control', name:\"select_#{field}\", ->\n      for opt in optlist\n        if model[field] is opt\n          tc.option selected:null, value:opt, opt\n        else\n          tc.option value:opt, opt\n          \nmake_login_form = (action='/login', method='POST') ->\n  tc.renderable (user) ->\n    tc.form\n      role:'form'\n      method: method\n      action: action, ->\n        form_group_input_div\n          input_id: 'input_username'\n          label: 'User Name'\n          input_attributes:\n            name: 'username'\n            placeholder: 'User Name'\n        form_group_input_div\n          input_id: 'input_password'\n          label: 'Password'\n          input_attributes:\n            name: 'password'\n            type: 'password'\n            placeholder: 'Type your password here....'\n        tc.button '.btn.btn-secondary', type:'submit', 'login'\n\nlogin_form = make_login_form()\n\nname_content_form = tc.renderable (model) ->\n  form_group_input_div\n    input_id: 'input_name'\n    label: 'Name'\n    input_attributes:\n      name: 'name'\n      placeholder: 'Name'\n  form_group_input_div\n    input_id: 'input_content'\n    input_type: tc.textarea\n    label: 'Content'\n    input_attributes:\n      name: 'content'\n      placeholder: '...'\n  tc.input '.btn.btn-secondary.btn-sm', type:'submit', value:'Add'\n\n########################################\nexport {\n  form_group_input_div\n  make_field_input\n  make_field_textarea\n  make_field_select\n  make_login_form\n  login_form\n  name_content_form\n  }\n  \n","import FormView from './formview'\n\nclass BootstrapFormView extends FormView\n  valid: (view, attr, selector) =>\n    @$(\"[data-validation=#{attr}]\").parent()\n      .removeClass('has-error')\n      .addClass('has-success')\n\n  invalid: (view, attr, error, selector) =>\n    @failure(@model)\n    @$(\"[data-validation=#{attr}]\").parent()\n      .removeClass('has-success')\n      .addClass('has-error')\n\nexport default BootstrapFormView\n","import $ from 'jquery'\nimport _ from 'underscore'\nimport Marionette from 'backbone.marionette'\nimport Validation from 'backbone.validation'\n\nexport default class FormView extends Backbone.Marionette.View\n  constructor: ->\n    super arguments...\n\n    @listenTo this, 'render', @hideActivityIndicator\n    @listenTo this, 'render', @prepareModel\n    @listenTo this, 'save:form:success', @success\n    @listenTo this, 'save:form:failure', @failure\n\n  delegateEvents: (events)->\n    @ui = _.extend @_baseUI(), _.result(this, 'ui')\n    @events = _.extend @_baseEvents(), _.result(this, 'events')\n    super events\n\n  tagName: 'form'\n\n  _baseUI: ->\n    submit: 'input[type=\"submit\"]'\n    activityIndicator: '.spinner'\n\n  _baseEvents: ->\n    eventHash =\n      'change [data-validation]': @validateField\n      'blur [data-validation]':   @validateField\n      'keyup [data-validation]':  @validateField\n\n    eventHash[\"click #{@ui.submit}\"] = @processForm\n    eventHash\n\n  createModel: ->\n    throw new Error 'implement #createModel in your FormView subclass to return a Backbone model' # noqa \n\n  prepareModel: ->\n    @model = @createModel()\n    @setupValidation()\n\n  validateField: (e) ->\n    validation = $(e.target).attr('data-validation')\n    value = $(e.target).val()\n    if @model.preValidate validation, value\n      @invalid @, validation\n    else\n      @valid @, validation\n\n  processForm: (e) ->\n    e.preventDefault()\n    @showActivityIndicator()\n\n    @updateModel()\n    @saveModel()\n\n  updateModel: ->\n    throw new Error 'implement #updateModel in your FormView subclass to update the attributes of @model' # noqa\n\n  saveModel: ->\n    callbacks =\n      success: => @trigger 'save:form:success', @model\n      error: => @trigger 'save:form:failure', @model\n\n    @model.save {}, callbacks\n\n  success: (model) ->\n    @render()\n    @onSuccess(model)\n\n  onSuccess: (model) -> null\n\n  failure: (model) ->\n    @hideActivityIndicator()\n    @onFailure(model)\n\n  onFailure: (model) -> null\n\n  showActivityIndicator: ->\n    @ui.activityIndicator.show()\n    @ui.submit.hide()\n\n  hideActivityIndicator: ->\n    @ui.activityIndicator.hide()\n    @ui.submit.show()\n\n  setupValidation: ->\n    Backbone.Validation.unbind this\n    Backbone.Validation.bind this,\n      valid: @valid\n      invalid: @invalid\n\n  valid: (view, attr, selector) =>\n    @$(\"[data-validation=#{attr}]\")\n      .removeClass('invalid')\n      .addClass('valid')\n\n  invalid: (view, attr, error, selector) =>\n    @failure(@model)\n    @$(\"[data-validation=#{attr}]\")\n      .removeClass('valid')\n      .addClass('invalid')\n\n"],"sourceRoot":""}