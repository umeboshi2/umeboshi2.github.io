{"version":3,"sources":["webpack:///./node_modules/tbirds/src/util/scroll-top-fast.coffee","webpack:///./node_modules/tbirds/src/views/layout.coffee","webpack:///./node_modules/tbirds/src/controllers.coffee","webpack:///./node_modules/tbirds/src/tkapplet.coffee","webpack:///./node_modules/backbone.paginator/lib/backbone.paginator.js","webpack:///./node_modules/tbirds/src/views/empty.coffee","webpack:///./node_modules/tbirds/src/regions/slidedown.coffee","webpack:///./node_modules/tbirds/src/behaviors/show-initial-empty.coffee"],"names":["__webpack_require__","r","__webpack_exports__","window","scrollTo","BaseAppletLayout","NavbarChannel","ToolbarAppletLayout","make_sidebar_template","_regions_slidedown__WEBPACK_IMPORTED_MODULE_5__","backbone__WEBPACK_IMPORTED_MODULE_0___default","a","Radio","channel","columns","size","position","teacup__WEBPACK_IMPORTED_MODULE_2___default","renderable","div","backbone_marionette__WEBPACK_IMPORTED_MODULE_1___default","View","[object Object]","request","reset","className","behaviors","ShowInitialEmptyContent","behaviorClass","_behaviors_show_initial_empty__WEBPACK_IMPORTED_MODULE_4__","SidebarAppletLayout","template","regions","sidebar","content","region","el","slide_speed","ms__WEBPACK_IMPORTED_MODULE_3___default","toolbar","BaseController","ExtraController","MainChannel","MainController","_util_scroll_top_fast__WEBPACK_IMPORTED_MODULE_5__","backbone__WEBPACK_IMPORTED_MODULE_1___default","backbone_marionette__WEBPACK_IMPORTED_MODULE_2___default","Object","extend","init_page","scrollTop","scroll_top","console","warn","this","arguments","navigateToUrl","_util_navigate_to_url__WEBPACK_IMPORTED_MODULE_4__","navigate_to_url","layoutClass","_views_layout__WEBPACK_IMPORTED_MODULE_3__","_getAppletRegion","getView","getRegion","setupLayout","getOption","layout","hasView","empty","applet","setupAppletEntries","show","setupLayoutIfNeeded","isDestroyed","setup_layout_if_needed","_get_region","_getRegion","_show_view","vclass","model","_showView","_load_view","objname","_loadView","options","view","Collection","collection","showChildView","_isModelAbsent","isEmpty","keys","attributes","length","response","fetch","done","fail","msg","MessageChannel","channelName","initialize","appletName","mainController","router","controller","getChannel","TkApplet","marionette_toolkit__WEBPACK_IMPORTED_MODULE_2__","marionette_toolkit__WEBPACK_IMPORTED_MODULE_2___default","n","indexOf","App","entries","appletEntries","set","appRoutes","method","ref","ref1","Controller","Router","forEach","appRoute","isFrontdoorApplet","appConfig","startFrontdoorMethod","call","_extraRouters","initExtraRouters","name","routerClass","controllerClass","extraRouters","results","ropts","rtr","log","setExtraRouter","module","exports","_","Backbone","_extend","_omit","omit","_clone","clone","_each","each","_pick","pick","_contains","includes","_isEmpty","_pairs","pairs","toPairs","_invert","invert","_isArray","isArray","_isFunction","isFunction","_isObject","isObject","_keys","_isUndefined","isUndefined","ceil","Math","floor","max","BBColProto","prototype","finiteInt","val","isNumber","isNaN","isFinite","TypeError","runOnceAtLastHandler","col","event","func","eventHandlers","_events","lastHandler","oldCallback","callback","apply","e","PARAM_TRIM_RE","URL_TRIM_RE","PageableCollection","state","firstPage","lastPage","currentPage","pageSize","totalPages","totalRecords","sortKey","order","mode","queryParams","directions","-1","1","constructor","models","PageableProto","slice","switchMode","resetState","comparator","setSorting","fullCollection","full","sort","getPage","_initState","_makeFullCollection","i","prop","properties","thisProto","proto","_makeCollectionEventHandler","pageCol","fullCol","handlers","_handlers","handler","off","pageStart","pageEnd","pageIndex","fullIndex","colToAdd","addAt","at","onRemove","_checkState","add","modelToRemove","remove","onAdd","silent","trigger","nextModel","removedIndex","index","push","parse","from","to","head","tail","concat","on","callbacks","unshift","pop","links","RangeError","setPageSize","first","self","_fullComparator","pageableCollection","allHandler","bind","url","hasPreviousPage","hasNextPage","getFirstPage","getPreviousPage","getNextPage","getLastPage","pageNum","pageModels","getPageByOffset","offset","page","sync","success","resp","status","xhr","newLinks","parseLinks","prev","next","linkHeader","getResponseHeader","relations","split","linkValue","linkParts","replace","params","param","paramParts","key","value","newState","parseState","parseRecords","serverState","kvp","k","v","serverVal","isNull","data","qsi","qs","ls","decode","decodeURIComponent","kvps","l","queryStringToParams","extraKvps","opts","_makeComparator","sortValue","attr","get","left","right","t","delComp","delFullComp","side","factory","teacup__WEBPACK_IMPORTED_MODULE_2__","EmptyView","Marionette","h1","text","SlideDownRegion","backbone_marionette__WEBPACK_IMPORTED_MODULE_1__","Region","speed","$el","hide","html","slideDown","_views_empty__WEBPACK_IMPORTED_MODULE_3__","Behavior","emptyView"],"mappings":"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","file":"0-f2d667524f6fc37202dd.js","sourcesContent":["# http://stackoverflow.com/questions/1144805/scroll-to-the-top-of-the-page-using-javascript-jquery\nexport default ()  ->\n  #$('html, body').animate {scrollTop: 0}, 'fast'\n  window.scrollTo 0,0\n","import Backbone from 'backbone'\nimport Marionette from 'backbone.marionette'\nimport tc from 'teacup'\nimport ms from 'ms'\n\nimport ShowInitialEmptyContent from '../behaviors/show-initial-empty'\n\nimport SlideDownRegion from '../regions/slidedown'\n\nif __useCssModules__\n  require \"../../sass/applet-layout.scss\"\n\nNavbarChannel = Backbone.Radio.channel 'navbar'\n\nmake_sidebar_template = (columns=3, size='sm', position='left') ->\n  tc.renderable () ->\n    if position is 'left'\n      tc.div \"#sidebar.col-#{size}-#{columns}.left-column\"\n    tc.div \"#main-content.col-#{size}-#{12 - columns}\"\n    if position is 'right'\n      tc.div \"#sidebar.col-#{size}-#{columns}.right-column\"\n\n\nclass BaseAppletLayout extends Marionette.View\n  className: 'applet-container'\n  onBeforeDestroy: ->\n    entries = NavbarChannel.request 'get-entries', 'applet'\n    entries.reset()\n  behaviors:\n    ShowInitialEmptyContent:\n      behaviorClass: ShowInitialEmptyContent\n  \nclass SidebarAppletLayout extends BaseAppletLayout\n  template: make_sidebar_template()\n  regions:\n    sidebar: '#sidebar'\n    content: '#main-content'\n\nclass ToolbarAppletLayout extends BaseAppletLayout\n  #el: '#applet-content'\n  template: tc.renderable () ->\n    tc.div '.row', ->\n      #tc.div  '#main-toolbar.col-sm-8.col-sm-offset-2'\n      tc.div  '#main-toolbar'\n    tc.div '.row', ->\n      #tc.div '#main-content.col-sm-10.col-sm-offset-1'\n      tc.div '#main-content'\n  regions: ->\n    region = new SlideDownRegion\n      el: '#main-content'\n    region.slide_speed = ms '.01s'\n    content: region\n    toolbar: '#main-toolbar'\n    \nexport {\n  BaseAppletLayout\n  SidebarAppletLayout\n  ToolbarAppletLayout\n  }\n","import $ from 'jquery'\nimport Backbone from 'backbone'\nimport Marionette from 'backbone.marionette'\n\nimport { ToolbarAppletLayout } from './views/layout'\n\nimport navigate_to_url from './util/navigate-to-url'\nimport scroll_top_fast from './util/scroll-top-fast'\n\nMainChannel = Backbone.Radio.channel 'global'\nNavbarChannel = Backbone.Radio.channel 'navbar'\n\n#class BaseController extends Marionette.Object\nBaseController = Marionette.Object.extend\n  init_page: () ->\n    # do nothing\n  scrollTop: scroll_top_fast\n  scroll_top: ->\n    console.warn \"use scrollTop instead\"\n    @scrollTop arguments\n  navigateToUrl: navigate_to_url\n  navigate_to_url: ->\n    console.warn \"use navigateToUrl instead\"\n    @navigateToUrl arguments\n\n#class MainController extends BaseController\nMainController = BaseController.extend\n  layoutClass: ToolbarAppletLayout\n\n  _getAppletRegion: ->\n    app = MainChannel.request 'main:app:object'\n    return app.getView().getRegion 'applet'\n    \n  setupLayout: ->\n    layoutClass = @getOption 'layoutClass'\n    @layout = new layoutClass\n    region = @_getAppletRegion()\n    if region.hasView()\n      region.empty()\n    @applet.setupAppletEntries()\n    region.show @layout\n    return\n    \n  # use this method to create a layout only if\n  # needed, making routing within the applet\n  # more efficient.\n  setupLayoutIfNeeded: ->\n    if @layout is undefined\n      @setupLayout()\n    else if @layout.isDestroyed()\n      @setupLayout()\n    viewEntries = NavbarChannel.request 'get-entries', 'view'\n    viewEntries.reset()\n    return\n  \n  setup_layout_if_needed: ->\n    console.warn \"use setupLayoutIfNeeded instead\"\n    @setupLayoutIfNeeded()\n    return\n    \n  _get_region: (region) ->\n    console.warn \"use _getRegion instead\"\n    return @_getRegion(region)\n    \n  _show_view: (vclass, model) ->\n    console.warn \"use _showView instead\"\n    @_showView(vclass, model)\n\n  _load_view: (vclass, model, objname) ->\n    console.warn \"use _loadView instead\"\n    @_loadView(vclass, model, objname)\n\n  _getRegion: (region) ->\n    return @layout.getRegion region\n    \n  _showView: (vclass, model) ->\n    options = model: model\n    if model instanceof Backbone.Collection\n      options = collection: model\n    view = new vclass options\n    @layout.showChildView 'content', view\n    return\n    \n  _isModelAbsent: (model) ->\n    if model instanceof Backbone.Collection\n      return model.isEmpty()\n    # FIXME\n    # presume \"id\" is only attribute there if length is 1\n    return model.isEmpty() or Object.keys(model.attributes).length is 1\n    \n  _loadView: (vclass, model, objname) ->\n    if @_isModelAbsent(model)\n      response = model.fetch()\n      response.done =>\n        @_showView vclass, model\n        return\n      response.fail ->\n        msg = \"Failed to load #{objname} data.\"\n        MessageChannel.request 'danger', msg\n        return\n    else\n      @_showView vclass, model\n    return\n    \n#class ExtraController extends BaseController\nExtraController = BaseController.extend\n  channelName: ->\n    return @getOption('channelName') or 'global'\n  initialize: (options) ->\n    @appletName = options.appletName\n    @applet = MainChannel.request 'main:applet:get-applet', @appletName\n    @mainController = @applet.router.controller\n    @channel = @getChannel()\n    return\n  setup_layout_if_needed: ->\n    @mainController.setup_layout_if_needed()\n    return\n  showChildView: (region, view) ->\n    @mainController.layout.showChildView region, view\n    return\n    \n#module.exports =\n#  BaseController: BaseController\n#  MainController: MainController\n#  ExtraController: ExtraController\n\nexport {\n  BaseController\n  MainController\n  ExtraController\n  }\n  \n\n","import Backbone from 'backbone'\nimport Marionette from 'backbone.marionette'\nimport Toolkit from 'marionette.toolkit'\n\nMainChannel = Backbone.Radio.channel 'global'\nNavbarChannel = Backbone.Radio.channel 'navbar'\n\nclass TkApplet extends Toolkit.App\n  setupAppletEntries: ->\n    entries = NavbarChannel.request 'get-entries', 'applet'\n    entries.reset()\n    if @appletEntries\n      entries.set @appletEntries\n    viewEntries = NavbarChannel.request 'get-entries', 'view'\n    viewEntries.reset()\n  onBeforeStart: ->\n    @setupAppletEntries()\n    controller = new @Controller\n    controller.applet = @\n    @router = new @Router\n      controller: controller\n    if @?.appRoutes\n      appRoutes = @appRoutes?() or @appRoutes\n      Object.keys(appRoutes).forEach (r) =>\n        @router.appRoute r, appRoutes[r]\n    # we want to adjust the approuter for frontdoor\n    # use here, instead of in the AppRouter class,\n    # so hopefully, only one applet handles the \"empty route.\n    if @options?.isFrontdoorApplet\n      method = @options.appConfig?.startFrontdoorMethod or 'start'\n      unless '' in Object.keys @router.appRoutes\n        if __DEV__\n          console.warn \"Adding start to TkApplet\"\n        @router.appRoute '', method\n    @_extraRouters = {}\n    @initExtraRouters()\n  onStop: ->\n    if __DEV__\n      console.log \"Stopping TkApplet\", @.isRunning()\n  setExtraRouter: (name, routerClass, controllerClass) ->\n    c = new controllerClass\n    r = new routerClass\n      controller: c\n    @_extraRouters[name] = r\n  initExtraRouters: ->\n    extraRouters = @getOption 'extraRouters'\n    exRtrs = @getOption 'extraRouters'\n    for rtr of extraRouters\n      ropts = extraRouters[rtr]\n      console.log \"rtr\", rtr, ropts\n      @setExtraRouter rtr, ropts['router'], ropts['controller']\n      if __DEV__\n        console.log \"extra router #{rtr} created\"\n  getExtraRouter: (name) ->\n    @_extraRouters[name]\n    \n      \nexport default TkApplet\n\n","/*\n  backbone.paginator\n  http://github.com/backbone-paginator/backbone.paginator\n\n  Copyright (c) 2016 Jimmy Yuen Ho Wong and contributors\n\n  @module\n  @license MIT\n*/\n\n(function (factory) {\n\n  // CommonJS\n  if (typeof exports == \"object\" && typeof require == \"function\") {\n    module.exports = factory(require(\"underscore\"), require(\"backbone\"));\n  }\n  // AMD\n  else if (typeof define == \"function\" && define.amd) {\n    define([\"underscore\", \"backbone\"], factory);\n  }\n  // Browser\n  else if (typeof _ !== \"undefined\" && typeof Backbone !== \"undefined\") {\n    var oldPageableCollection = Backbone.PageableCollection;\n    var PageableCollection = factory(_, Backbone);\n\n    /**\n       __BROWSER ONLY__\n\n       If you already have an object named `PageableCollection` attached to the\n       `Backbone` module, you can use this to return a local reference to this\n       PageableCollection class and reset the name PageableCollection to its\n       previous definition.\n\n           // The left hand side gives you a reference to this\n           // PageableCollection implementation, the right hand side\n           // resets PageableCollection to your other PageableCollection.\n           var PageableCollection = PageableCollection.noConflict();\n\n       @static\n       @return {PageableCollection}\n    */\n    Backbone.PageableCollection.noConflict = function () {\n      Backbone.PageableCollection = oldPageableCollection;\n      return PageableCollection;\n    };\n  }\n\n}(function (_, Backbone) {\n\n  \"use strict\";\n\n  var _extend = _.extend;\n  var _omit = _.omit;\n  var _clone = _.clone;\n  var _each = _.each;\n  var _pick = _.pick;\n  var _contains = _.includes;\n  var _isEmpty = _.isEmpty;\n  var _pairs = _.pairs || _.toPairs;\n  var _invert = _.invert;\n  var _isArray = _.isArray;\n  var _isFunction = _.isFunction;\n  var _isObject = _.isObject;\n  var _keys = _.keys;\n  var _isUndefined = _.isUndefined;\n  var ceil = Math.ceil;\n  var floor = Math.floor;\n  var max = Math.max;\n\n  var BBColProto = Backbone.Collection.prototype;\n\n  function finiteInt (val, name) {\n    if (!_.isNumber(val) || _.isNaN(val) || !_.isFinite(val) || ~~val !== val) {\n      throw new TypeError(\"`\" + name + \"` must be a finite integer\");\n    }\n    return val;\n  }\n\n  function queryStringToParams (qs) {\n    var kvp, k, v, ls, params = {}, decode = decodeURIComponent;\n    var kvps = qs.split('&');\n    for (var i = 0, l = kvps.length; i < l; i++) {\n      var param = kvps[i];\n      kvp = param.split('='), k = kvp[0], v = kvp[1];\n      if (v == null) v = true;\n      k = decode(k), v = decode(v), ls = params[k];\n      if (_isArray(ls)) ls.push(v);\n      else if (ls) params[k] = [ls, v];\n      else params[k] = v;\n    }\n    return params;\n  }\n\n  // hack to make sure the whatever event handlers for this event is run\n  // before func is, and the event handlers that func will trigger.\n  function runOnceAtLastHandler (col, event, func) {\n    var eventHandlers = col._events[event];\n    if (eventHandlers && eventHandlers.length) {\n      var lastHandler = eventHandlers[eventHandlers.length - 1];\n      var oldCallback = lastHandler.callback;\n      lastHandler.callback = function () {\n        try {\n          oldCallback.apply(this, arguments);\n          func();\n        }\n        catch (e) {\n          throw e;\n        }\n        finally {\n          lastHandler.callback = oldCallback;\n        }\n      };\n    }\n    else func();\n  }\n\n  var PARAM_TRIM_RE = /[\\s'\"]/g;\n  var URL_TRIM_RE = /[<>\\s'\"]/g;\n\n\n  /**\n   * State change event. Fired when PageableCollection#state gets updated\n   *\n   * @event pageable:state:change\n   * @type {object} The PageableCollection#state object of this\n   * PageableCollection instance\n   */\n\n\n  /**\n     Drop-in replacement for Backbone.Collection. Supports server-side and\n     client-side pagination and sorting. Client-side mode also support fully\n     multi-directional synchronization of changes between pages.\n\n     @class PageableCollection\n     @extends Backbone.Collection\n  */\n  var PageableCollection = Backbone.PageableCollection = Backbone.Collection.extend({\n\n    /**\n       The container object to store all pagination states.\n\n       You can override the default state by extending this class or specifying\n       them in an `options` hash to the constructor.\n\n       @property {number} firstPage = 1 - The first page index. Set to 0 if\n       your server API uses 0-based indices. You should only override this value\n       during extension, initialization or reset by the server after\n       fetching. This value should be read only at other times.\n\n       @property {number} lastPage = null - The last page index. This value\n       is __read only__ and it's calculated based on whether `firstPage` is 0 or\n       1, during bootstrapping, fetching and resetting. Please don't change this\n       value under any circumstances.\n\n       @property {number} currentPage = null - The current page index. You\n       should only override this value during extension, initialization or reset\n       by the server after fetching. This value should be read only at other\n       times. Can be a 0-based or 1-based index, depending on whether\n       `firstPage` is 0 or 1. If left as default, it will be set to `firstPage`\n       on initialization.\n\n       @property {number} pageSize = 25 - How many records to show per\n       page. This value is __read only__ after initialization, if you want to\n       change the page size after initialization, you must call\n       PageableCollection#setPageSize.\n\n       @property {number} totalPages = null - How many pages there are. This\n       value is __read only__ and it is calculated from `totalRecords`.\n\n       @property {number} totalRecords = null - How many records there\n       are. This value is __required__ under server mode. This value is optional\n       for client mode as the number will be the same as the number of models\n       during bootstrapping and during fetching, either supplied by the server\n       in the metadata, or calculated from the size of the response.\n\n       @property {string} sortKey = null - The model attribute to use for\n       sorting.\n\n       @property {number} order = -1 - The order to use for sorting. Specify\n       -1 for ascending order or 1 for descending order. If 0, no client side\n       sorting will be done and the order query parameter will not be sent to\n       the server during a fetch.\n    */\n    state: {\n      firstPage: 1,\n      lastPage: null,\n      currentPage: null,\n      pageSize: 25,\n      totalPages: null,\n      totalRecords: null,\n      sortKey: null,\n      order: -1\n    },\n\n    /**\n       @property {string} mode = \"server\" The mode of operations for this\n       collection. `\"server\"` paginates on the server-side, `\"client\"` paginates\n       on the client-side and `\"infinite\"` paginates on the server-side for APIs\n       that do not support `totalRecords`.\n    */\n    mode: \"server\",\n\n    /**\n       A translation map to convert PageableCollection state attributes\n       to the query parameters accepted by your server API.\n\n       You can override the default state by extending this class or specifying\n       them in `options.queryParams` object hash to the constructor.\n\n       @property {string|function():string} currentPage = \"page\"\n       @property {string|function():string} pageSize = \"per_page\"\n       @property {string|function():string} totalPages = \"total_pages\"\n       @property {string|function():string} totalRecords = \"total_entries\"\n       @property {string|function():string} sortKey = \"sort_by\"\n       @property {string|function():string} order = \"order\"\n       @property {Object} directions = {\"-1\": \"asc\", \"1\": \"desc\"} - A map for\n       translating a PageableCollection#state.order constant to the ones your\n       server API accepts.\n    */\n    queryParams: {\n      currentPage: \"page\",\n      pageSize: \"per_page\",\n      totalPages: \"total_pages\",\n      totalRecords: \"total_entries\",\n      sortKey: \"sort_by\",\n      order: \"order\",\n      directions: {\n        \"-1\": \"asc\",\n        \"1\": \"desc\"\n      }\n    },\n\n    /**\n       Given a list of models or model attributues, bootstraps the full\n       collection in client mode or infinite mode, or just the page you want in\n       server mode.\n\n       If you want to initialize a collection to a different state than the\n       default, you can specify them in `options.state`. Any state parameters\n       supplied will be merged with the default. If you want to change the\n       default mapping from PageableCollection#state keys to your server API's\n       query parameter names, you can specifiy an object hash in\n       `option.queryParams`. Likewise, any mapping provided will be merged with\n       the default. Lastly, all Backbone.Collection constructor options are also\n       accepted.\n\n       See:\n\n       - PageableCollection#state\n       - PageableCollection#queryParams\n       - [Backbone.Collection#initialize](http://backbonejs.org/#Collection-constructor)\n\n       @constructor\n\n       @property {Backbone.Collection} fullCollection - __CLIENT MODE ONLY__\n       This collection is the internal storage for the bootstrapped or fetched\n       models. You can use this if you want to operate on all the pages.\n\n       @param {Array.<Object>} models\n\n       @param {Object} options\n\n       @param {function(*, *): number} options.comparator - If specified, this\n       comparator is set to the current page under server mode, or the\n       PageableCollection#fullCollection otherwise.\n\n       @param {boolean} options.full 0 If `false` and either a\n       `options.comparator` or `sortKey` is defined, the comparator is attached\n       to the current page. Default is `true` under client or infinite mode and\n       the comparator will be attached to the PageableCollection#fullCollection.\n\n       @param {Object} options.state - The state attributes overriding the defaults.\n\n       @param {string} options.state.sortKey - The model attribute to use for\n       sorting. If specified instead of `options.comparator`, a comparator will\n       be automatically created using this value, and optionally a sorting order\n       specified in `options.state.order`. The comparator is then attached to\n       the new collection instance.\n\n       @param {number} options.state.order - The order to use for sorting. Specify\n       -1 for ascending order and 1 for descending order.\n\n       @param {Object} options.queryParam\n    */\n    constructor: function (models, options) {\n\n      BBColProto.constructor.apply(this, arguments);\n\n      options = options || {};\n\n      var mode = this.mode = options.mode || this.mode || PageableProto.mode;\n\n      var queryParams = _extend({}, PageableProto.queryParams, this.queryParams,\n                                options.queryParams || {});\n\n      queryParams.directions = _extend({},\n                                       PageableProto.queryParams.directions,\n                                       this.queryParams.directions,\n                                       queryParams.directions);\n\n      this.queryParams = queryParams;\n\n      var state = this.state = _extend({}, PageableProto.state, this.state,\n                                       options.state);\n\n      state.currentPage = state.currentPage == null ?\n        state.firstPage :\n        state.currentPage;\n\n      if (!_isArray(models)) models = models ? [models] : [];\n      models = models.slice();\n\n      if (mode != \"server\" && state.totalRecords == null && !_isEmpty(models)) {\n        // Can't use models.length naively here because Backbone.Collection will\n        // dedupe by `idAttribute`\n        state.totalRecords = this.length;\n      }\n\n      this.switchMode(mode, _extend({fetch: false,\n                                     resetState: false,\n                                     models: models}, options));\n\n      var comparator = options.comparator;\n\n      if (state.sortKey && !comparator) {\n        this.setSorting(state.sortKey, state.order, options);\n      }\n\n      if (mode != \"server\") {\n        var fullCollection = this.fullCollection;\n\n        if (comparator && options.full) {\n          this.comparator = null;\n          fullCollection.comparator = comparator;\n        }\n\n        if (options.full) fullCollection.sort();\n\n        // make sure the models in the current page and full collection have the\n        // same references\n        if (!_isEmpty(models)) {\n          this.getPage(state.currentPage);\n        }\n      }\n\n      this._initState = _clone(this.state);\n    },\n\n    /**\n       Makes a Backbone.Collection that contains all the pages.\n\n       @private\n       @param {Array.<Object|Backbone.Model>} models\n       @param {Object} options Options for Backbone.Collection constructor.\n       @return {Backbone.Collection}\n    */\n    _makeFullCollection: function (models, options) {\n\n      var properties = [\"url\", \"model\", \"sync\", \"comparator\"];\n      var thisProto = this.constructor.prototype;\n      var i, length, prop;\n\n      var proto = {};\n      for (i = 0, length = properties.length; i < length; i++) {\n        prop = properties[i];\n        if (!_isUndefined(thisProto[prop])) {\n          proto[prop] = thisProto[prop];\n        }\n      }\n\n      var fullCollection = new (Backbone.Collection.extend(proto))(models, options);\n\n      for (i = 0, length = properties.length; i < length; i++) {\n        prop = properties[i];\n        if (this[prop] !== thisProto[prop]) {\n          fullCollection[prop] = this[prop];\n        }\n      }\n\n      return fullCollection;\n    },\n\n    /**\n       Factory method that returns a Backbone event handler that responses to\n       the `add`, `remove`, `reset`, and the `sort` events. The returned event\n       handler will synchronize the current page collection and the full\n       collection's models.\n\n       @private\n\n       @fires PageableCollection#pageable:state:change when handling an\n       `add`, `remove`, or `reset` event\n\n       @param {PageableCollection} pageCol\n       @param {Backbone.Collection} fullCol\n\n       @return {function(string, Backbone.Model, Backbone.Collection, Object)}\n       Collection event handler\n    */\n    _makeCollectionEventHandler: function (pageCol, fullCol) {\n\n      return function collectionEventHandler (event, model, collection, options) {\n\n        var handlers = pageCol._handlers;\n        _each(_keys(handlers), function (event) {\n          var handler = handlers[event];\n          pageCol.off(event, handler);\n          fullCol.off(event, handler);\n        });\n\n        var state = _clone(pageCol.state);\n        var firstPage = state.firstPage;\n        var currentPage = firstPage === 0 ?\n          state.currentPage :\n          state.currentPage - 1;\n        var pageSize = state.pageSize;\n        var pageStart = currentPage * pageSize, pageEnd = pageStart + pageSize;\n\n        if (event == \"add\") {\n          var pageIndex, fullIndex, addAt, colToAdd, options = options || {};\n          if (collection == fullCol) {\n            fullIndex = fullCol.indexOf(model);\n            if (fullIndex >= pageStart && fullIndex < pageEnd) {\n              colToAdd = pageCol;\n              pageIndex = addAt = fullIndex - pageStart;\n            }\n          }\n          else {\n            pageIndex = pageCol.indexOf(model);\n            fullIndex = pageStart + pageIndex;\n            colToAdd = fullCol;\n            var addAt = !_isUndefined(options.at) ?\n              options.at + pageStart :\n              fullIndex;\n          }\n\n          if (!options.onRemove) {\n            ++state.totalRecords;\n            delete options.onRemove;\n          }\n\n          pageCol.state = pageCol._checkState(state);\n\n          if (colToAdd) {\n            colToAdd.add(model, _extend({}, options, {at: addAt}));\n            var modelToRemove = pageIndex >= pageSize ?\n              model :\n              !_isUndefined(options.at) && addAt < pageEnd && pageCol.length > pageSize ?\n              pageCol.at(pageSize) :\n              null;\n            if (modelToRemove) {\n              runOnceAtLastHandler(collection, event, function () {\n                pageCol.remove(modelToRemove, {onAdd: true});\n              });\n            }\n          }\n\n          if (!options.silent) pageCol.trigger(\"pageable:state:change\", pageCol.state);\n        }\n\n        // remove the model from the other collection as well\n        if (event == \"remove\") {\n          if (!options.onAdd) {\n            // decrement totalRecords and update totalPages and lastPage\n            if (!--state.totalRecords) {\n              state.totalRecords = null;\n              state.totalPages = null;\n            }\n            else {\n              var totalPages = state.totalPages = ceil(state.totalRecords / pageSize);\n              state.lastPage = firstPage === 0 ? totalPages - 1 : totalPages || firstPage;\n              if (state.currentPage > totalPages) state.currentPage = state.lastPage;\n            }\n            pageCol.state = pageCol._checkState(state);\n\n            var nextModel, removedIndex = options.index;\n            if (collection == pageCol) {\n              if (nextModel = fullCol.at(pageEnd)) {\n                runOnceAtLastHandler(pageCol, event, function () {\n                  pageCol.push(nextModel, {onRemove: true});\n                });\n              }\n              else if (!pageCol.length && state.totalRecords) {\n                pageCol.reset(fullCol.models.slice(pageStart - pageSize, pageEnd - pageSize),\n                              _extend({}, options, {parse: false}));\n              }\n              fullCol.remove(model);\n            }\n            else if (removedIndex >= pageStart && removedIndex < pageEnd) {\n              if (nextModel = fullCol.at(pageEnd - 1)) {\n                runOnceAtLastHandler(pageCol, event, function() {\n                  pageCol.push(nextModel, {onRemove: true});\n                });\n              }\n              pageCol.remove(model);\n              if (!pageCol.length && state.totalRecords) {\n                pageCol.reset(fullCol.models.slice(pageStart - pageSize, pageEnd - pageSize),\n                              _extend({}, options, {parse: false}));\n              }\n            }\n          }\n          else delete options.onAdd;\n\n          if (!options.silent) pageCol.trigger(\"pageable:state:change\", pageCol.state);\n        }\n\n        if (event == \"reset\") {\n          options = collection;\n          collection = model;\n\n          // Reset that's not a result of getPage\n          if (collection == pageCol && options.from == null &&\n              options.to == null) {\n            var head = fullCol.models.slice(0, pageStart);\n            var tail = fullCol.models.slice(pageStart + pageCol.models.length);\n            fullCol.reset(head.concat(pageCol.models).concat(tail), options);\n          }\n          else if (collection == fullCol) {\n            if (!(state.totalRecords = fullCol.models.length)) {\n              state.totalRecords = null;\n              state.totalPages = null;\n            }\n            if (pageCol.mode == \"client\") {\n              firstPage = state.lastPage = state.currentPage = state.firstPage;\n              currentPage = firstPage === 0 ? state.currentPage : state.currentPage - 1;\n              pageStart = currentPage * pageSize;\n              pageEnd = pageStart + pageSize;\n            }\n            pageCol.state = pageCol._checkState(state);\n            pageCol.reset(fullCol.models.slice(pageStart, pageEnd),\n                          _extend({}, options, {parse: false}));\n          }\n\n          if (!options.silent) pageCol.trigger(\"pageable:state:change\", pageCol.state);\n        }\n\n        if (event == \"sort\") {\n          options = collection;\n          collection = model;\n          if (collection === fullCol) {\n            pageCol.reset(fullCol.models.slice(pageStart, pageEnd),\n                          _extend({}, options, {parse: false}));\n          }\n        }\n\n        _each(_keys(handlers), function (event) {\n          var handler = handlers[event];\n          _each([pageCol, fullCol], function (col) {\n            col.on(event, handler);\n            var callbacks = col._events[event] || [];\n            callbacks.unshift(callbacks.pop());\n          });\n        });\n      };\n    },\n\n    /**\n       Sanity check this collection's pagination states. Only perform checks\n       when all the required pagination state values are defined and not null.\n       If `totalPages` is undefined or null, it is set to `totalRecords` /\n       `pageSize`. `lastPage` is set according to whether `firstPage` is 0 or 1\n       when no error occurs.\n\n       @private\n\n       @throws {TypeError} If `totalRecords`, `pageSize`, `currentPage` or\n       `firstPage` is not a finite integer.\n\n       @throws {RangeError} If `pageSize`, `currentPage` or `firstPage` is out\n       of bounds.\n\n       @return {Object} Returns the `state` object if no error was found.\n    */\n    _checkState: function (state) {\n      var mode = this.mode;\n      var links = this.links;\n      var totalRecords = state.totalRecords;\n      var pageSize = state.pageSize;\n      var currentPage = state.currentPage;\n      var firstPage = state.firstPage;\n      var totalPages = state.totalPages;\n\n      if (totalRecords != null && pageSize != null && currentPage != null &&\n          firstPage != null && (mode == \"infinite\" ? links : true)) {\n\n        totalRecords = finiteInt(totalRecords, \"totalRecords\");\n        pageSize = finiteInt(pageSize, \"pageSize\");\n        currentPage = finiteInt(currentPage, \"currentPage\");\n        firstPage = finiteInt(firstPage, \"firstPage\");\n\n        if (pageSize < 1) {\n          throw new RangeError(\"`pageSize` must be >= 1\");\n        }\n\n        totalPages = state.totalPages = ceil(totalRecords / pageSize);\n\n        if (firstPage < 0 || firstPage > 1) {\n          throw new RangeError(\"`firstPage must be 0 or 1`\");\n        }\n\n        state.lastPage = firstPage === 0 ? max(0, totalPages - 1) : totalPages || firstPage;\n\n        if (mode == \"infinite\") {\n          if (!links[currentPage]) {\n            throw new RangeError(\"No link found for page \" + currentPage);\n          }\n        }\n        else if (currentPage < firstPage ||\n                 (totalPages > 0 &&\n                  (firstPage ? currentPage > totalPages : currentPage >= totalPages))) {\n          throw new RangeError(\"`currentPage` must be firstPage <= currentPage \" +\n                               (firstPage ? \"<\" : \"<=\") +\n                               \" totalPages if \" + firstPage + \"-based. Got \" +\n                               currentPage + '.');\n        }\n      }\n\n      return state;\n    },\n\n    /**\n       Change the page size of this collection.\n\n       Under most if not all circumstances, you should call this method to\n       change the page size of a pageable collection because it will keep the\n       pagination state sane. By default, the method will recalculate the\n       current page number to one that will retain the current page's models\n       when increasing the page size. When decreasing the page size, this method\n       will retain the last models to the current page that will fit into the\n       smaller page size.\n\n       If `options.first` is true, changing the page size will also reset the\n       current page back to the first page instead of trying to be smart.\n\n       For server mode operations, changing the page size will trigger a\n       PageableCollection#fetch and subsequently a `reset` event.\n\n       For client mode operations, changing the page size will `reset` the\n       current page by recalculating the current page boundary on the client\n       side.\n\n       If `options.fetch` is true, a fetch can be forced if the collection is in\n       client mode.\n\n       @param {number} pageSize - The new page size to set to PageableCollection#state.\n       @param {Object} options - {@link PageableCollection#fetch} options.\n       @param {boolean} options.first = false 0 Reset the current page number to\n       the first page if `true`.\n       @param {boolean} options.fetch - If `true`, force a fetch in client mode.\n\n       @throws {TypeError} If `pageSize` is not a finite integer.\n       @throws {RangeError} If `pageSize` is less than 1.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    setPageSize: function (pageSize, options) {\n      pageSize = finiteInt(pageSize, \"pageSize\");\n\n      options = options || {first: false};\n\n      var state = this.state;\n      var totalPages = ceil(state.totalRecords / pageSize);\n      var currentPage = totalPages ?\n          max(state.firstPage, floor(totalPages * state.currentPage / state.totalPages)) :\n        state.firstPage;\n\n      state = this.state = this._checkState(_extend({}, state, {\n        pageSize: pageSize,\n        currentPage: options.first ? state.firstPage : currentPage,\n        totalPages: totalPages\n      }));\n\n      return this.getPage(state.currentPage, _omit(options, [\"first\"]));\n    },\n\n    /**\n       Switching between client, server and infinite mode.\n\n       If switching from client to server mode, the #fullCollection is emptied\n       first and then deleted and a fetch is immediately issued for the current\n       page from the server. Pass `false` to `options.fetch` to skip fetching.\n\n       If switching to infinite mode, and if `options.models` is given for an\n       array of models,PageableCollection#links will be populated with a URL per\n       page, using the default URL for this collection.\n\n       If switching from server to client mode, all of the pages are immediately\n       refetched. If you have too many pages, you can pass `false` to\n       `options.fetch` to skip fetching.\n\n       If switching to any mode from infinite mode, thePageableCollection#links\n       will be deleted.\n\n       @fires PageableCollection#pageable:state:change\n\n       @param {\"server\"|\"client\"|\"infinite\"} mode - The mode to switch to.\n\n       @param {Object} options\n\n       @param {boolean} options.fetch = true - If `false`, no fetching is done.\n\n       @param {boolean} options.resetState = true - If 'false', the state is not\n       reset, but checked for sanity instead.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this if `options.fetch` is `false`.\n    */\n    switchMode: function (mode, options) {\n\n      if (!_contains([\"server\", \"client\", \"infinite\"], mode)) {\n        throw new TypeError('`mode` must be one of \"server\", \"client\" or \"infinite\"');\n      }\n\n      options = options || {fetch: true, resetState: true};\n\n      var state = this.state = options.resetState ?\n        _clone(this._initState) :\n        this._checkState(_extend({}, this.state));\n\n      this.mode = mode;\n\n      var self = this;\n      var fullCollection = this.fullCollection;\n      var handlers = this._handlers = this._handlers || {}, handler;\n      if (mode != \"server\" && !fullCollection) {\n        fullCollection = this._makeFullCollection(options.models || [], options);\n        fullCollection.pageableCollection = this;\n        this.fullCollection = fullCollection;\n        var allHandler = this._makeCollectionEventHandler(this, fullCollection);\n        _each([\"add\", \"remove\", \"reset\", \"sort\"], function (event) {\n          handlers[event] = handler = _.bind(allHandler, {}, event);\n          self.on(event, handler);\n          fullCollection.on(event, handler);\n        });\n        fullCollection.comparator = this._fullComparator;\n      }\n      else if (mode == \"server\" && fullCollection) {\n        _each(_keys(handlers), function (event) {\n          handler = handlers[event];\n          self.off(event, handler);\n          fullCollection.off(event, handler);\n        });\n        delete this._handlers;\n        this._fullComparator = fullCollection.comparator;\n        delete this.fullCollection;\n      }\n\n      if (mode == \"infinite\") {\n        var links = this.links = {};\n        var firstPage = state.firstPage;\n        var totalPages = ceil(state.totalRecords / state.pageSize);\n        var lastPage = firstPage === 0 ? max(0, totalPages - 1) : totalPages || firstPage;\n        for (var i = state.firstPage; i <= lastPage; i++) {\n          links[i] = this.url;\n        }\n      }\n      else if (this.links) delete this.links;\n\n      if (!options.silent) this.trigger(\"pageable:state:change\", state);\n\n      return options.fetch ?\n        this.fetch(_omit(options, \"fetch\", \"resetState\")) :\n        this;\n    },\n\n    /**\n       @return {boolean} `true` if this collection can page backward, `false`\n       otherwise.\n    */\n    hasPreviousPage: function () {\n      var state = this.state;\n      var currentPage = state.currentPage;\n      if (this.mode != \"infinite\") return currentPage > state.firstPage;\n      return !!this.links[currentPage - 1];\n    },\n\n    /**\n       @return {boolean} `true` if this collection can page forward, `false`\n       otherwise.\n    */\n    hasNextPage: function () {\n      var state = this.state;\n      var currentPage = this.state.currentPage;\n      if (this.mode != \"infinite\") return currentPage < state.lastPage;\n      return !!this.links[currentPage + 1];\n    },\n\n    /**\n       Fetch the first page in server mode, or reset the current page of this\n       collection to the first page in client or infinite mode.\n\n       @param {Object} options {@linkPageableCollection#getPage} options.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    getFirstPage: function (options) {\n      return this.getPage(\"first\", options);\n    },\n\n    /**\n       Fetch the previous page in server mode, or reset the current page of this\n       collection to the previous page in client or infinite mode.\n\n       @param {Object} options {@linkPageableCollection#getPage} options.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    getPreviousPage: function (options) {\n      return this.getPage(\"prev\", options);\n    },\n\n    /**\n       Fetch the next page in server mode, or reset the current page of this\n       collection to the next page in client mode.\n\n       @param {Object} options {@linkPageableCollection#getPage} options.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    getNextPage: function (options) {\n      return this.getPage(\"next\", options);\n    },\n\n    /**\n       Fetch the last page in server mode, or reset the current page of this\n       collection to the last page in client mode.\n\n       @param {Object} options {@linkPageableCollection#getPage} options.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    getLastPage: function (options) {\n      return this.getPage(\"last\", options);\n    },\n\n    /**\n       Given a page index, set PageableCollection#state.currentPage to that\n       index. If this collection is in server mode, fetch the page using the\n       updated state, otherwise, reset the current page of this collection to\n       the page specified by `index` in client mode. If `options.fetch` is true,\n       a fetch can be forced in client mode before resetting the current\n       page. Under infinite mode, if the index is less than the current page, a\n       reset is done as in client mode. If the index is greater than the current\n       page number, a fetch is made with the results **appended**\n       toPageableCollection#fullCollection.  The current page will then be reset\n       after fetching.\n\n       @fires PageableCollection#pageable:state:change\n\n       @param {number|string} index - The page index to go to, or the page name to\n       look up fromPageableCollection#links in infinite mode.\n       @param {Object} options - {@linkPageableCollection#fetch} options or\n       [reset](http://backbonejs.org/#Collection-reset) options for client mode\n       when `options.fetch` is `false`.\n       @param {boolean} options.fetch = false - If true, force a\n       {@linkPageableCollection#fetch} in client mode.\n\n       @throws {TypeError} If `index` is not a finite integer under server or\n       client mode, or does not yield a URL fromPageableCollection#links under\n       infinite mode.\n\n       @throws {RangeError} If `index` is out of bounds.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    getPage: function (index, options) {\n\n      var mode = this.mode, fullCollection = this.fullCollection;\n\n      options = options || {fetch: false};\n\n      var state = this.state,\n      firstPage = state.firstPage,\n      currentPage = state.currentPage,\n      lastPage = state.lastPage,\n      pageSize = state.pageSize;\n\n      var pageNum = index;\n      switch (index) {\n        case \"first\": pageNum = firstPage; break;\n        case \"prev\": pageNum = currentPage - 1; break;\n        case \"next\": pageNum = currentPage + 1; break;\n        case \"last\": pageNum = lastPage; break;\n        default: pageNum = finiteInt(index, \"index\");\n      }\n\n      this.state = this._checkState(_extend({}, state, {currentPage: pageNum}));\n      if (!options.silent) this.trigger(\"pageable:state:change\", this.state);\n\n      options.from = currentPage, options.to = pageNum;\n\n      var pageStart = (firstPage === 0 ? pageNum : pageNum - 1) * pageSize;\n      var pageModels = fullCollection && fullCollection.length ?\n        fullCollection.models.slice(pageStart, pageStart + pageSize) :\n        [];\n      if ((mode == \"client\" || (mode == \"infinite\" && !_isEmpty(pageModels))) &&\n          !options.fetch) {\n        this.reset(pageModels, _omit(options, \"fetch\"));\n        return this;\n      }\n\n      if (mode == \"infinite\") options.url = this.links[pageNum];\n\n      return this.fetch(_omit(options, \"fetch\"));\n    },\n\n    /**\n       Fetch the page for the provided item offset in server mode, or reset the\n       current page of this collection to the page for the provided item offset\n       in client mode.\n\n       @param {Object} options {@linkPageableCollection#getPage} options.\n\n       @chainable\n       @return {XMLHttpRequest|PageableCollection} The XMLHttpRequest\n       from fetch or this.\n    */\n    getPageByOffset: function (offset, options) {\n      if (offset < 0) {\n        throw new RangeError(\"`offset must be > 0`\");\n      }\n      offset = finiteInt(offset, \"offset\");\n\n      var page = floor(offset / this.state.pageSize);\n      if (this.state.firstPage !== 0) page++;\n      if (page > this.state.lastPage) page = this.state.lastPage;\n      return this.getPage(page, options);\n    },\n\n    /**\n       Overidden to make `getPage` compatible with Zepto.\n\n       @param {string} method\n       @param {Backbone.Model|Backbone.Collection} model\n       @param {Object} options\n\n       @return {XMLHttpRequest}\n    */\n    sync: function (method, model, options) {\n      var self = this;\n      if (self.mode == \"infinite\") {\n        var success = options.success;\n        var currentPage = self.state.currentPage;\n        options.success = function (resp, status, xhr) {\n          var links = self.links;\n          var newLinks = self.parseLinks(resp, _extend({xhr: xhr}, options));\n          if (newLinks.first) links[self.state.firstPage] = newLinks.first;\n          if (newLinks.prev) links[currentPage - 1] = newLinks.prev;\n          if (newLinks.next) links[currentPage + 1] = newLinks.next;\n          if (success) success(resp, status, xhr);\n        };\n      }\n\n      return (BBColProto.sync || Backbone.sync).call(self, method, model, options);\n    },\n\n    /**\n       Parse pagination links from the server response. Only valid under\n       infinite mode.\n\n       Given a response body and a XMLHttpRequest object, extract pagination\n       links from them for infinite paging.\n\n       This default implementation parses the RFC 5988 `Link` header and extract\n       3 links from it - `first`, `prev`, `next`. Any subclasses overriding this\n       method __must__ return an object hash having only the keys\n       above. However, simply returning a `next` link or an empty hash if there\n       are no more links should be enough for most implementations.\n\n       @param {*} resp The deserialized response body.\n       @param {Object} options\n       @param {XMLHttpRequest} options.xhr - The XMLHttpRequest object for this\n       response.\n       @return {Object}\n    */\n    parseLinks: function (resp, options) {\n      var links = {};\n      var linkHeader = options.xhr.getResponseHeader(\"Link\");\n      if (linkHeader) {\n        var relations = [\"first\", \"prev\", \"next\"];\n        _each(linkHeader.split(\",\"), function (linkValue) {\n          var linkParts = linkValue.split(\";\");\n          var url = linkParts[0].replace(URL_TRIM_RE, '');\n          var params = linkParts.slice(1);\n          _each(params, function (param) {\n            var paramParts = param.split(\"=\");\n            var key = paramParts[0].replace(PARAM_TRIM_RE, '');\n            var value = paramParts[1].replace(PARAM_TRIM_RE, '');\n            if (key == \"rel\" && _contains(relations, value)) links[value] = url;\n          });\n        });\n      }\n\n      return links;\n    },\n\n    /**\n       Parse server response data.\n\n       This default implementation assumes the response data is in one of two\n       structures:\n\n           [\n             {}, // Your new pagination state\n             [{}, ...] // An array of JSON objects\n           ]\n\n       Or,\n\n           [{}] // An array of JSON objects\n\n       The first structure is the preferred form because the pagination states\n       may have been updated on the server side, sending them down again allows\n       this collection to update its states. If the response has a pagination\n       state object, it is checked for errors.\n\n       The second structure is the\n       [Backbone.Collection#parse](http://backbonejs.org/#Collection-parse)\n       default.\n\n       **Note:** this method has been further simplified since 1.1.7. While\n       existingPageableCollection#parse implementations will continue to work,\n       new code is encouraged to overridePageableCollection#parseState\n       andPageableCollection#parseRecords instead.\n\n       @fires PageableCollection#pageable:state:change\n\n       @param {Object} resp The deserialized response data from the server.\n       @param {Object} the options for the ajax request\n\n       @return {Array.<Object>} An array of model objects\n    */\n    parse: function (resp, options) {\n      var newState = this.parseState(resp, _clone(this.queryParams), _clone(this.state), options);\n      if (newState) {\n        this.state = this._checkState(_extend({}, this.state, newState));\n        if (!(options || {}).silent) this.trigger(\"pageable:state:change\", this.state);\n      }\n      return this.parseRecords(resp, options);\n    },\n\n    /**\n       Parse server response for server pagination state updates. Not applicable\n       under infinite mode.\n\n       This default implementation first checks whether the response has any\n       state object as documented inPageableCollection#parse. If it exists, a\n       state object is returned by mapping the server state keys to this\n       pageable collection instance's query parameter keys using `queryParams`.\n\n       It is __NOT__ neccessary to return a full state object complete with all\n       the mappings defined inPageableCollection#queryParams. Any state object\n       resulted is merged with a copy of the current pageable collection state\n       and checked for sanity before actually updating. Most of the time, simply\n       providing a new `totalRecords` value is enough to trigger a full\n       pagination state recalculation.\n\n           parseState: function (resp, queryParams, state, options) {\n             return {totalRecords: resp.total_entries};\n           }\n\n       If you want to use header fields use:\n\n           parseState: function (resp, queryParams, state, options) {\n               return {totalRecords: options.xhr.getResponseHeader(\"X-total\")};\n           }\n\n       This method __MUST__ return a new state object instead of directly\n       modifying the PageableCollection#state object. The behavior of directly\n       modifying PageableCollection#state is undefined.\n\n       @param {Object} resp - The deserialized response data from the server.\n       @param {Object} queryParams - A copy of PageableCollection#queryParams.\n       @param {Object} state - A copy of PageableCollection#state.\n       @param {Object} options - The options passed through from\n       `parse`. (backbone >= 0.9.10 only)\n\n       @return {Object} A new (partial) state object.\n     */\n    parseState: function (resp, queryParams, state, options) {\n      if (resp && resp.length === 2 && _isObject(resp[0]) && _isArray(resp[1])) {\n\n        var newState = _clone(state);\n        var serverState = resp[0];\n\n        _each(_pairs(_omit(queryParams, \"directions\")), function (kvp) {\n          var k = kvp[0], v = kvp[1];\n          var serverVal = serverState[v];\n          if (!_isUndefined(serverVal) && !_.isNull(serverVal)) newState[k] = serverState[v];\n        });\n\n        if (serverState.order) {\n          newState.order = _invert(queryParams.directions)[serverState.order] * 1;\n        }\n\n        return newState;\n      }\n    },\n\n    /**\n       Parse server response for an array of model objects.\n\n       This default implementation first checks whether the response has any\n       state object as documented inPageableCollection#parse. If it exists, the\n       array of model objects is assumed to be the second element, otherwise the\n       entire response is returned directly.\n\n       @param {Object} resp - The deserialized response data from the server.\n       @param {Object} options - The options passed through from the\n       `parse`. (backbone >= 0.9.10 only)\n\n       @return {Array.<Object>} An array of model objects\n     */\n    parseRecords: function (resp, options) {\n      if (resp && resp.length === 2 && _isObject(resp[0]) && _isArray(resp[1])) {\n        return resp[1];\n      }\n\n      return resp;\n    },\n\n    /**\n       Fetch a page from the server in server mode, or all the pages in client\n       mode. Under infinite mode, the current page is refetched by default and\n       then reset.\n\n       The query string is constructed by translating the current pagination\n       state to your server API query parameter\n       usingPageableCollection#queryParams. The current page will reset after\n       fetch.\n\n       @param {Object} options - Accepts all\n       [Backbone.Collection#fetch](http://backbonejs.org/#Collection-fetch)\n       options.\n\n       @return {XMLHttpRequest}\n    */\n    fetch: function (options) {\n\n      options = options || {};\n\n      var state = this._checkState(this.state);\n\n      var mode = this.mode;\n\n      if (mode == \"infinite\" && !options.url) {\n        options.url = this.links[state.currentPage];\n      }\n\n      var data = options.data || {};\n\n      // dedup query params\n      var url = options.url || this.url || \"\";\n      if (_isFunction(url)) url = url.call(this);\n      var qsi = url.indexOf('?');\n      if (qsi != -1) {\n        _extend(data, queryStringToParams(url.slice(qsi + 1)));\n        url = url.slice(0, qsi);\n      }\n\n      options.url = url;\n      options.data = data;\n\n      // pick the appropriate query param keys to map according to the mode\n      var queryParams = this.mode == \"client\" ?\n          _pick(this.queryParams, \"sortKey\") :\n          _omit(_pick(this.queryParams, _keys(PageableProto.queryParams)),\n                \"order\", \"directions\", \"totalPages\", \"totalRecords\");\n\n      // map the query params to the data object used by the underlying ajax lib\n      // to construct the query string\n      _each(queryParams, function (v, k) {\n        v = _isFunction(v) ? v.call(this) : v;\n        if (state[k] != null && v != null && _.isUndefined(data[v])) {\n          data[v] = state[k];\n        }\n      }, this);\n\n      var sortKey = _isFunction(this.queryParams.sortKey) ?\n          this.queryParams.sortKey.call(this) :\n          this.queryParams.sortKey;\n\n      var order = _isFunction(this.queryParams.order) ?\n          this.queryParams.order.call(this) :\n          this.queryParams.order;\n\n      if (sortKey != null && state.sortKey != null &&\n          order != null && state.order != null) {\n        if (_isArray(state.order)) {\n          data[order] = [];\n          for (var i = 0; i < state.order.length; i++) {\n            data[order].push(this.queryParams.directions[state.order[i]]);\n          }\n        }\n        else {\n          data[order] = this.queryParams.directions[state.order + \"\"];\n        }\n      }\n\n      // map extra query parameters\n      var extraKvps = _pairs(_omit(this.queryParams,\n                                   _keys(PageableProto.queryParams)));\n      for (var i = 0; i < extraKvps.length; i++) {\n        var kvp = extraKvps[i];\n        var v = kvp[1];\n        v = _isFunction(v) ? v.call(this) : v;\n        if (v != null) data[kvp[0]] = v;\n      }\n\n      if (mode != \"server\") {\n        var self = this, fullCol = this.fullCollection;\n        var success = options.success;\n        options.success = function (col, resp, opts) {\n\n          // make sure the caller's intent is obeyed\n          opts = opts || {};\n          if (_isUndefined(options.silent)) delete opts.silent;\n          else opts.silent = options.silent;\n\n          var models = col.models;\n          if (mode == \"client\") fullCol.reset(models, opts);\n          else {\n            fullCol.add(models, _extend({at: fullCol.length},\n                                        _extend(opts, {parse: false})));\n            self.trigger(\"reset\", self, opts);\n          }\n\n          if (success) success(col, resp, opts);\n        };\n\n        // silent the first reset from backbone\n        return BBColProto.fetch.call(this, _extend({}, options, {silent: true}));\n      }\n\n      return BBColProto.fetch.call(this, options);\n    },\n\n    /**\n       Convenient method for making a `comparator` sorted by a model attribute\n       identified by `sortKey` and ordered by `order`.\n\n       Like a Backbone.Collection, a PageableCollection will maintain the\n       __current page__ in sorted order on the client side if a `comparator` is\n       attached to it. If the collection is in client mode, you can attach a\n       comparator toPageableCollection#fullCollection to have all the pages\n       reflect the global sorting order by specifying an option `full` to\n       `true`. You __must__ call `sort` manually\n       orPageableCollection#fullCollection.sort after calling this method to\n       force a resort.\n\n       While you can use this method to sort the current page in server mode,\n       the sorting order may not reflect the global sorting order due to the\n       additions or removals of the records on the server since the last\n       fetch. If you want the most updated page in a global sorting order, it is\n       recommended that you set PageableCollection#state.sortKey and optionally\n       PageableCollection#state.order, and then callPageableCollection#fetch.\n\n       @protected\n\n       @param {string} sortKey = this.state.sortKey - See `state.sortKey`.\n       @param {number} order = this.state.order - See `state.order`.\n       @param {(function(Backbone.Model, string): Object) | string} sortValue -\n       See PageableCollection#setSorting.\n\n       See [Backbone.Collection.comparator](http://backbonejs.org/#Collection-comparator).\n    */\n    _makeComparator: function (sortKey, order, sortValue) {\n      var state = this.state;\n\n      sortKey = sortKey || state.sortKey;\n      order = order || state.order;\n\n      if (!sortKey || !order) return;\n\n      if (!sortValue) sortValue = function (model, attr) {\n        return model.get(attr);\n      };\n\n      return function (left, right) {\n        var l = sortValue(left, sortKey), r = sortValue(right, sortKey), t;\n        if (order === 1) t = l, l = r, r = t;\n        if (l === r) return 0;\n        else if (l < r) return -1;\n        return 1;\n      };\n    },\n\n    /**\n       Adjusts the sorting for this pageable collection.\n\n       Given a `sortKey` and an `order`, sets `state.sortKey` and\n       `state.order`. A comparator can be applied on the client side to sort in\n       the order defined if `options.side` is `\"client\"`. By default the\n       comparator is applied to thePageableCollection#fullCollection. Set\n       `options.full` to `false` to apply a comparator to the current page under\n       any mode. Setting `sortKey` to `null` removes the comparator from both\n       the current page and the full collection.\n\n       If a `sortValue` function is given, it will be passed the `(model,\n       sortKey)` arguments and is used to extract a value from the model during\n       comparison sorts. If `sortValue` is not given, `model.get(sortKey)` is\n       used for sorting.\n\n       @chainable\n\n       @param {string} sortKey - See `state.sortKey`.\n       @param {number} order=this.state.order - See `state.order`.\n       @param {Object} options\n       @param {string} options.side - By default, `\"client\"` if `mode` is\n       `\"client\"`, `\"server\"` otherwise.\n       @param {boolean} options.full = true\n       @param {(function(Backbone.Model, string): Object) | string} options.sortValue\n    */\n    setSorting: function (sortKey, order, options) {\n\n      var state = this.state;\n\n      state.sortKey = sortKey;\n      state.order = order = order || state.order;\n\n      var fullCollection = this.fullCollection;\n\n      var delComp = false, delFullComp = false;\n\n      if (!sortKey) delComp = delFullComp = true;\n\n      var mode = this.mode;\n      options = _extend({side: mode == \"client\" ? mode : \"server\", full: true},\n                        options);\n\n      var comparator = this._makeComparator(sortKey, order, options.sortValue);\n\n      var full = options.full, side = options.side;\n\n      if (side == \"client\") {\n        if (full) {\n          if (fullCollection) fullCollection.comparator = comparator;\n          delComp = true;\n        }\n        else {\n          this.comparator = comparator;\n          delFullComp = true;\n        }\n      }\n      else if (side == \"server\" && !full) {\n        this.comparator = comparator;\n      }\n\n      if (delComp) this.comparator = null;\n      if (delFullComp && fullCollection) fullCollection.comparator = null;\n\n      return this;\n    }\n\n  });\n\n  var PageableProto = PageableCollection.prototype;\n\n  return PageableCollection;\n\n}));\n","import Backbone from 'backbone'\nimport Marionette from 'backbone.marionette'\nimport tc from 'teacup'\n\nexport default class EmptyView extends Backbone.Marionette.View\n  template: tc.renderable ->\n    tc.div '.jumbotron', ->\n      tc.h1 ->\n        tc.text 'Loading ...'\n        tc.i '.fa.fa-spinner.fa-spin'\n    \n  \n","import $ from 'jquery'\nimport Marionette from 'backbone.marionette'\n\nclass SlideDownRegion extends Marionette.Region\n  attachHtml: (view) ->\n    speed = if @slide_speed then @slide_speed else 'fast'\n    @$el.hide()\n    @$el.html view.el\n    @$el.slideDown speed\n\nexport default SlideDownRegion\n","import { result } from 'underscore'\nimport Backbone from 'backbone'\nimport Marionette from 'backbone.marionette'\n\nMainChannel = Backbone.Radio.channel 'global'\n\nimport EmptyView from '../views/empty'\n\nexport default class ShowInitialEmptyContent extends Marionette.Behavior\n  options:\n    emptyView: EmptyView\n  onDomRefresh: ->\n    View = @getOption 'emptyView'\n    view = new View\n    @view.showChildView 'content', view\n"],"sourceRoot":""}